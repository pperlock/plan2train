[{"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\index.js":"1","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\reportWebVitals.js":"2","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\App.js":"3","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\TrainerProvider.js":"4","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx":"5","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx":"6","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx":"7","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx":"8","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx":"9","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientWelcome\\ClientWelcome.jsx":"10","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientProfile\\ClientProfile.jsx":"11","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientLessons\\ClientLessons.jsx":"12","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ProgramDetails\\ProgramDetails.jsx":"13","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Lessons\\Lessons.jsx":"14","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\NextLesson\\NextLesson.jsx":"15","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx":"16","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\trainer-context.js":"17","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\EmptyPage\\EmptyPage.jsx":"18","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\firebase.js":"19","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx":"20","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PageLayout\\PageLayout.jsx":"21","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Map\\Map.jsx":"22","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\GridList\\GridList.jsx":"23","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientNav\\ClientNav.jsx":"24","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx":"25","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx":"26","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\mapStyles.js":"27","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Modal\\Modal.jsx":"28","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx":"29","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx":"30","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx":"31","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx":"32","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx":"33","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx":"34","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx":"35","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx":"36","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx":"37","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx":"38","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx":"39"},{"size":479,"mtime":1609516748053,"results":"40","hashOfConfig":"41"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"41"},{"size":3451,"mtime":1622978975049,"results":"43","hashOfConfig":"41"},{"size":3456,"mtime":1622979157117,"results":"44","hashOfConfig":"41"},{"size":8682,"mtime":1622926767224,"results":"45","hashOfConfig":"41"},{"size":1401,"mtime":1612381285891,"results":"46","hashOfConfig":"41"},{"size":723,"mtime":1622926767220,"results":"47","hashOfConfig":"41"},{"size":3088,"mtime":1622926767221,"results":"48","hashOfConfig":"41"},{"size":717,"mtime":1622926767209,"results":"49","hashOfConfig":"41"},{"size":7351,"mtime":1622990086388,"results":"50","hashOfConfig":"41"},{"size":9845,"mtime":1622984537358,"results":"51","hashOfConfig":"41"},{"size":17543,"mtime":1622926767200,"results":"52","hashOfConfig":"41"},{"size":17744,"mtime":1622989915299,"results":"53","hashOfConfig":"41"},{"size":5392,"mtime":1622990107313,"results":"54","hashOfConfig":"41"},{"size":5901,"mtime":1622990116348,"results":"55","hashOfConfig":"41"},{"size":3418,"mtime":1622926767248,"results":"56","hashOfConfig":"41"},{"size":196,"mtime":1622926767253,"results":"57","hashOfConfig":"41"},{"size":1723,"mtime":1622926767211,"results":"58","hashOfConfig":"41"},{"size":457,"mtime":1612972896192,"results":"59","hashOfConfig":"41"},{"size":3761,"mtime":1622926767243,"results":"60","hashOfConfig":"41"},{"size":369,"mtime":1622926767245,"results":"61","hashOfConfig":"41"},{"size":1849,"mtime":1613397892924,"results":"62","hashOfConfig":"41"},{"size":3171,"mtime":1622926767233,"results":"63","hashOfConfig":"41"},{"size":3432,"mtime":1622926767229,"results":"64","hashOfConfig":"41"},{"size":8992,"mtime":1622926767238,"results":"65","hashOfConfig":"41"},{"size":6051,"mtime":1622984285456,"results":"66","hashOfConfig":"41"},{"size":3603,"mtime":1613395492156,"results":"67","hashOfConfig":"41"},{"size":3657,"mtime":1622926767242,"results":"68","hashOfConfig":"41"},{"size":2500,"mtime":1622926767232,"results":"69","hashOfConfig":"41"},{"size":6057,"mtime":1622979396027,"results":"70","hashOfConfig":"41"},{"size":2184,"mtime":1612182661122,"results":"71","hashOfConfig":"41"},{"size":1284,"mtime":1613143137627,"results":"72","hashOfConfig":"41"},{"size":1589,"mtime":1611882658451,"results":"73","hashOfConfig":"41"},{"size":1207,"mtime":1622926767249,"results":"74","hashOfConfig":"41"},{"size":3837,"mtime":1622926767235,"results":"75","hashOfConfig":"41"},{"size":9973,"mtime":1622926767246,"results":"76","hashOfConfig":"41"},{"size":5506,"mtime":1622990200370,"results":"77","hashOfConfig":"41"},{"size":1366,"mtime":1612190047381,"results":"78","hashOfConfig":"41"},{"size":1670,"mtime":1613154893118,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"lesuvl",{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"82"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\index.js",[],["166","167"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\reportWebVitals.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\App.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\TrainerProvider.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx",["168","169"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport axios from 'axios';\r\n\r\nimport \"./Trainer.scss\"\r\n\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport {API_URL} from '../../App';\r\n\r\n\r\nconst Trainer = () => {\r\n\r\n    const {userProfile, setUserProfile, setTrainerId, updateUserProfile} = useContext(TrainerContext);\r\n\r\n    const {trainerId} = useParams();\r\n\r\n    //store the selected file in state\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        setTrainerId(trainerId);\r\n    },[]);\r\n\r\n   /** ================================================ ADD LOGO ================================================*/\r\n\r\n   //activate the click method on the invisible input box when the logo is clicked \r\n   const activateFileSelector=()=>{\r\n        const inputBox = document.getElementById('inputFile');\r\n        inputBox.click();\r\n    }\r\n    \r\n    //get the file selected from the file picker and store it in state\r\n    const fileSelectedHandler = event =>{\r\n        setSelectedFile(event.target.files[0]); \r\n    }\r\n\r\n    //upload the logo file to firebase storage in the trainer's\r\n    const fileUpload=()=>{\r\n        if(!!selectedFile){\r\n            let bucketName = trainerId;\r\n            let storageRef = firebase.storage().ref(`/${bucketName}/${selectedFile.name}`);\r\n            let uploadTask = storageRef.put(selectedFile);\r\n            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n                ()=>{\r\n                    console.log(\"Uploading ...\")\r\n                },\r\n                ()=>{\r\n                    console.log(\"Upload Unsuccessful\");\r\n                },\r\n                ()=>{\r\n                    //once the file is uploaded get the url and save it to the db and update the trainer component\r\n                    let storageLoc = firebase.storage().ref();\r\n                    storageLoc.child(`/${bucketName}/${selectedFile.name}`).getDownloadURL()\r\n                    .then((url)=>{\r\n                        const logo={logo:url}\r\n                        axios.put(`${API_URL}/trainer/${trainerId}/updateLogo`, logo)\r\n                        .then(res =>{\r\n                            const profileCopy = {...userProfile};\r\n                            profileCopy.company.logo = res.data;\r\n                            setUserProfile(profileCopy);\r\n                        })\r\n                        .catch(err=>{\r\n                            console.log(err);\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n                        console.log(err);\r\n                    })\r\n                }   \r\n            )\r\n        }\r\n    }\r\n\r\n    //fire the fileupload function any time the selectedFile is changed in state\r\n    useEffect(()=>{\r\n        fileUpload();\r\n    },[selectedFile, fileUpload])\r\n\r\n\r\n    const {lname,fname,username,password,email,phone,address,city,province,country,postal} = userProfile ? userProfile.contact : {};\r\n    const {facebook, twitter, instagram, linkedIn} = userProfile ? userProfile.social : {};\r\n    const {name, description, logo} = userProfile ? userProfile.company : {};\r\n\r\n     //show the password as *****\r\n     const hiddenPassword = password && password.split(\"\").map(character => \"*\");\r\n   \r\n    return (\r\n        <>\r\n            {userProfile &&  \r\n                <div className=\"user-profile\" style={{backgroundImage: \"url('/images/main2.jfif')\"}}>\r\n                    <p className=\"user-profile__type\">Profile: Trainer</p>\r\n                    <div className=\"user-profile__bottom\">\r\n                        <div className=\"user-profile__description\">\r\n                        \r\n                            <div className=\"user-profile__description-logo-container\">\r\n\r\n                                {/* render the logo from the db - if there isn't one use the image icon stored on the front end */}\r\n                                <img src={logo !==\"\" ? logo : \"/icons/image.svg\"} alt =\"company logo\" className=\"user-profile__description-logo\" onClick={activateFileSelector}/>\r\n                                \r\n                                <input id=\"inputFile\" type=\"file\" className=\"user-profile__description-input\" onChange={fileSelectedHandler}></input>\r\n\r\n                            </div>\r\n                            <div className=\"user-profile__description-content\">\r\n                                <p className=\"user-profile__description-company\">{name}</p>\r\n                                <p className=\"user-profile__description-description\">{description}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"component user-profile__container\">\r\n                            <p className=\"component-title user-profile__title\">{`${fname} ${lname}`}</p>\r\n                            \r\n                            {(username !==\"google\" && username !==\"facebook\") &&\r\n                            <div className=\"user-profile__sign-in\">                       \r\n                                <p className=\"user-label\" >UserName: </p>\r\n                                <p className=\"user-text\"> {username}</p>\r\n\r\n                                <p className=\"user-label\" >Password: </p>\r\n                                <p className=\"user-text\"> {hiddenPassword}</p>\r\n                            </div>\r\n                            }\r\n\r\n                            <div className=\"user-profile__details\">\r\n                                <div className=\"user-profile__contact\">\r\n                                    <p className=\"user-label user-profile__contact-title\"> CONTACT </p> \r\n                                    <div className=\"user-profile-item\">\r\n                                        <img className=\"contact-icon\" src=\"/icons/email-icon.svg\" alt=\"email\"/><p>{email}</p>\r\n                                    </div>\r\n                                    <div className=\"user-profile-item\">\r\n                                        <img className=\"contact-icon\" src=\"/icons/phone-icon.svg\" alt=\"phone number\"/><p>{phone}</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"user-profile__social\">\r\n                                        <a href={facebook} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/facebook-icon.svg\" alt=\"facebook\"/></a>\r\n                                        <a href={twitter} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/twitter-icon.svg\" alt=\"twitter\"/></a>\r\n                                        <a href={instagram} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/instagram-icon.svg\" alt=\"instagram\"/></a>\r\n                                        <a href={linkedIn} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/linkedin-icon.svg\" alt=\"linked-in\"/></a>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"user-profile__address\">\r\n                                        <p className=\"user-label user-profile__address-title\">ADDRESS</p>\r\n                                        <p className=\"user-profile__address-item\">{address}</p>\r\n                                        <p className=\"user-profile__address-item\">{`${city}, ${province}, ${country}`}</p>\r\n                                        <p className=\"user-profile__address-item\">{postal}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* render the modalcontainer along with the button used to trigger it for updating the user profile */}\r\n                            <div className=\"user-profile__update\">\r\n                                <ModalContainer \r\n                                    modalName = \"updateUser\" \r\n                                    modalType = \"update\" \r\n                                    buttonText=\"Update\" \r\n                                    buttonType=\"image\" \r\n                                    url=\"/icons/user-edit.svg\" \r\n                                    information={userProfile} onSubmit={updateUserProfile}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Trainer\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx",["170"],"import React from 'react'\r\nimport \"./Schedule.scss\"\r\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\r\n\r\n\r\n// import FullCalendar, { formatDate } from '@fullcalendar/react'\r\n// import dayGridPlugin from '@fullcalendar/daygrid'\r\n// import timeGridPlugin from '@fullcalendar/timegrid'\r\n// import interactionPlugin from '@fullcalendar/interaction'\r\n\r\n\r\nfunction Schedule() {\r\n\r\n\r\n\r\n    // const handleDateSelect = (selectInfo) => {\r\n    //     console.log(selectInfo)\r\n    //     let title = prompt('Please enter a new title for your event')\r\n    //     let calendarApi = selectInfo.view.calendar\r\n\r\n    //     calendarApi.unselect() // clear date selection\r\n\r\n    //     if (title) {\r\n    //         calendarApi.addEvent({\r\n    //         id: createEventId(),\r\n    //         title,\r\n    //         start: selectInfo.startStr,\r\n    //         end: selectInfo.endStr,\r\n    //         allDay: selectInfo.allDay\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // const handleEventClick = (clickInfo) => {\r\n    //     if (alert(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n    //       clickInfo.event.remove()\r\n    //     }\r\n    //   }\r\n    \r\n    // const handleEvents = (events) => {\r\n    //     // this.setState({\r\n    //     //   currentEvents: events\r\n    //     // })\r\n    //   }\r\n    \r\n    // function renderEventContent(eventInfo) {\r\n    //   return (\r\n    //     <>\r\n    //       <b>{eventInfo.timeText}</b>\r\n    //       <i>{eventInfo.event.title}</i>\r\n    //     </>\r\n    //   )\r\n    // }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"schedule\" style={{backgroundImage: \"url('/images/main2.jfif')\"}}>\r\n                {/* <FullCalendar\r\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                    headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                    }}\r\n                    initialView='dayGridMonth'\r\n                    editable={true}\r\n                    selectable={true}\r\n                    selectMirror={true}\r\n                    dayMaxEvents={true}\r\n                    //weekends={this.state.weekendsVisible}\r\n                    initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n                    select={handleDateSelect}\r\n                    eventContent={renderEventContent} // custom render function\r\n                    eventClick={handleEventClick}\r\n                    eventsSet={handleEvents} // called after events are initialized/added/changed/removed\r\n                    /* you can update a remote database when these fire:\r\n                    eventAdd={function(){}}\r\n                    eventChange={function(){}}\r\n                    eventRemove={function(){}}\r\n                    */}\r\n                {/* /> */}\r\n\t\t\t\t<img className=\"construction\" src=\"/images/construction.jfif\"/>\r\n            </div>            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Schedule","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientWelcome\\ClientWelcome.jsx",["171"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientProfile\\ClientProfile.jsx",["172"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientLessons\\ClientLessons.jsx",["173"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './ClientLessons.scss'\r\n\r\nimport GridList from '../../components/GridList/GridList';\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport LessonResources from '../../components/LessonResources/LessonResources';\r\nimport PageLayout from  '../../components/PageLayout/PageLayout';\r\nimport ClientNav from '../../components/ClientNav/ClientNav';\r\n\r\nimport Map from '../../components/Map/Map';\r\n\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport {API_URL} from '../../App.js';\r\n\r\nconst ClientLessons  = () => {\r\n\r\n    const {setTrainerId, clients, programs} = useContext(TrainerContext);\r\n\r\n    const {trainerId, clientId} = useParams();\r\n\r\n    const [currentLesson, setCurrentLesson] = useState(null);\r\n    const [mapLocation, setMapLocation] = useState(null);\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        console.log('lessons updated')\r\n        if (!!clients){\r\n            const findClient = clients.find(client=>client.userId === clientId);\r\n            setCurrentClient(findClient);\r\n            setCurrentLesson(findClient.lessons.find(lesson=>lesson.current))\r\n        }\r\n        setTrainerId(trainerId);\r\n        \r\n        if(currentLesson){\r\n            geoCode();\r\n\r\n            //gets an array of all the resource ids that have been applied to all lessons\r\n            let allApplied = [];\r\n            const lessons = currentClient.lessons;\r\n            lessons.map(lesson=> lesson.resources.map(resource => allApplied.push(resource)));\r\n            \r\n            // adds a key name applied to each resource for all trainer programs\r\n            // const programs = [...this.state.availablePrograms];\r\n            programs.map(program => program.resources.map(resource => Object.assign(resource,{applied:false})))\r\n        \r\n            //adds the resource information for each lesson resource and adds a value of true for applied to the programs\r\n            programs.forEach(program=>\r\n                program.resources.forEach(programResource=>\r\n                    currentClient.lessons.forEach(lesson => \r\n                        lesson.resources.forEach((resource, i)=> {\r\n                            if(resource.id === programResource.id){\r\n                                //sets a value of true for applied resources\r\n                                programResource.applied=true;\r\n                                //remove the single id\r\n                                lesson.resources.splice(i,1);\r\n                                //replace the resource with the object\r\n                                lesson.resources.push(programResource);\r\n                            }  \r\n                        })\r\n                    )          \r\n                )\r\n            )\r\n        }\r\n    }, [currentClient, currentLesson, clients])\r\n\r\n    const geoCode = () =>{\r\n        const {address, city, province} = currentLesson.location;\r\n        axios.get(`http://www.mapquestapi.com/geocoding/v1/address?key=${process.env.REACT_APP_MAPQUEST_API}&street=${address}&city=${city}&state=${province}`)\r\n        .then(res=>{\r\n            // console.log(res.data.results[0].locations[0].displayLatLng);\r\n            // this.setState({mapLocation:res.data.results[0].locations[0].displayLatLng}); \r\n            setMapLocation(res.data.results[0].locations[0].displayLatLng)    \r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n     //adds an item to either the homework or the notes lists when the form is submitted\r\n    const addListItem = (note, list) =>{\r\n\r\n        const newItem={\r\n            note:note\r\n        }\r\n    \r\n        if (list===\"addNote\"){\r\n            //if the target is the notes section then save it to the appropriate spot in the db\r\n\r\n            axios.post(`${API_URL}/client/${clientId}/${currentLesson.id}/addNote`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = {...currentLesson};\r\n                lessonCopy.notes = res.data;\r\n\r\n                const clientCopy = {...currentClient};\r\n                const lessonloc = clientCopy.lessons.findIndex(lesson => lesson.id === currentLesson.id);\r\n                clientCopy.lessons.splice(lessonloc,1,lessonCopy);\r\n\r\n                setCurrentClient(clientCopy);\r\n                setCurrentLesson(lessonCopy);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }else{\r\n            //if the target is the homework section then save it to the appropriate spot in the db\r\n            axios.post(`${API_URL}/client/${clientId}/${currentLesson.id}/addHomework`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = {...currentLesson};\r\n                lessonCopy.homework = res.data;\r\n\r\n                const clientCopy = {...currentClient};\r\n                const lessonloc = clientCopy.lessons.findIndex(lesson => lesson.id === currentLesson.id);\r\n                clientCopy.lessons.splice(lessonloc,1,lessonCopy);\r\n\r\n                setCurrentLesson(lessonCopy);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n  \r\n    //changes the lesson being rendered when a lesson is clicked from top list\r\n    const updateCurrentLesson = lessonId =>{\r\n        const currentLesson = currentClient.lessons.find(lesson => lesson.id === lessonId);\r\n        setCurrentLesson(currentLesson);\r\n    }\r\n\r\n    //adds a new empty lesson when +New is clicked and saves it to the db\r\n    const addNewLesson = event =>{\r\n        event.preventDefault();\r\n        const {lessonName,date,time, locationName,address,city, province, country} = event.target\r\n\r\n        const newLesson = {\r\n            name:lessonName.value,\r\n            date:date.value,\r\n            time:time.value,\r\n            location:{\r\n                name:locationName.value,\r\n                address:address.value,\r\n                city:city.value,\r\n                province:province.value,\r\n                country:country.value\r\n            }\r\n        }\r\n\r\n        axios.post(`${API_URL}/client/${clientId}/addLesson`,newLesson)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            clientCopy.lessons.push(res.data)\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const deleteLesson = lessonId =>{\r\n       \r\n        axios.delete(`${API_URL}/client/${clientId}/${lessonId}/deleteLesson`)\r\n            .then(res =>{\r\n                const clientCopy = {...currentClient};\r\n                const lessonLoc = clientCopy.lessons.findIndex(lesson => lesson.id === lessonId);\r\n                clientCopy.lessons.splice(lessonLoc, 1);\r\n                setCurrentClient(clientCopy);\r\n                setCurrentLesson(currentClient.lessons[0]);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    const updateDetails = event =>{\r\n\r\n        event.preventDefault();\r\n\r\n        const {lessonName, date, time, locationName, address, city, province, country} = event.target;\r\n        \r\n        const updatedLesson = {\r\n            current:currentLesson.current,\r\n            name:lessonName.value,\r\n            date:date.value,\r\n            time:time.value,\r\n            location:{\r\n                name:locationName.value,\r\n                address:address.value,\r\n                city:city.value,\r\n                province:province.value,\r\n                country:country.value\r\n            }\r\n        }\r\n\r\n        axios.put(`${API_URL}/client/${currentClient.userId}/${currentLesson.id}/updateLessonDetails`, updatedLesson)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            const index = clientCopy.lessons.findIndex(lesson=>lesson.id === currentLesson.id);\r\n            clientCopy.lessons.splice(index,1);\r\n            clientCopy.lessons.splice(index, 0, res.data);\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const updateStatus = event =>{\r\n\r\n        const {id} = event.target;\r\n        axios.put(`${API_URL}/client/${clientId}/${id}/updateStatus`)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            const lessonCopy = {...currentLesson};\r\n            clientCopy.lessons.forEach(lesson => lesson.current = (lesson.id === id) ? true : false);\r\n            lessonCopy.current = true;\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(lessonCopy);\r\n\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n    if(!!currentClient && currentClient.lessons.length === 0){\r\n        return(   \r\n            <>\r\n                {clients && <PageLayout> \r\n                    <ClientNav />                                  \r\n                        <div className=\"empty-container empty-lessons\">\r\n                            <div className=\"empty-lessons__modal\">\r\n                                <ModalContainer \r\n                                    modalType = \"update\" \r\n                                    modalName = \"addLesson\" \r\n                                    buttonType=\"image\"\r\n                                    url=\"/icons/add-icon.svg\"\r\n                                    onSubmit={addNewLesson} \r\n                                />\r\n                            </div>\r\n                            <p>Click to Add a Lesson</p>\r\n                        </div>\r\n                </PageLayout>}\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            {clients && <PageLayout> \r\n\r\n                <ClientNav />\r\n                <div className=\"lessons\">\r\n                    {/* list of all client's lessons - click to render a specific lesson */}\r\n                    <div className=\"lessons__list\">\r\n\r\n                        {currentClient &&\r\n                            currentClient.lessons.map(lesson=> \r\n                            <GridList \r\n                                key={lesson.id} \r\n                                content={{name:lesson.name, date: lesson.date, time:lesson.time, current:lesson.current}}\r\n                                id={lesson.id} \r\n                                modalName={!lesson.current ? \"delete\" : \"noDelete\"}\r\n                                deleteBtn={true}\r\n                                deleteType=\"modal\" \r\n                                deleteString = {!lesson.current ? lesson.name : \"Cannot Delete Next Lesson\"}\r\n                                deleteFunction={deleteLesson}\r\n                                onClick={updateCurrentLesson}\r\n                                updateStatus={updateStatus}\r\n                                slider={true}\r\n                            />)\r\n                        }\r\n\r\n                        <div className=\"lessons__list-new\">\r\n                            <ModalContainer \r\n                                modalType = \"update\" \r\n                                modalName = \"addLesson\" \r\n                                buttonType=\"image\"\r\n                                url=\"/icons/plus-square.svg\"\r\n                                onSubmit={addNewLesson} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* displays the chosen lesson set in state */}\r\n                \r\n                    {currentLesson && \r\n                        <div className=\"component current-lesson\">\r\n                        <h2 className=\"component-title\">{currentLesson.name}</h2>\r\n                            <div className = \"current-lesson__top\">\r\n                                {/* shows the details for the lesson */}\r\n                                <div className=\"current-lesson__top-details\">\r\n                                    <div className=\"current-lesson__top-details-text\">\r\n                                        <div className=\"current-lesson__top-details-where\">\r\n                                            <p className=\"current-lesson__top-details-title\">Where</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{currentLesson.location.name}</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`${currentLesson.location.address}, ${currentLesson.location.city}`}</p>\r\n                                        </div>\r\n                                        <div className=\"current-lesson__top-details-when\">\r\n                                            <p className=\"current-lesson__top-details-title\">When</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`Date: ${currentLesson.date}`}</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`Time: ${currentLesson.time}`}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* modal to update the lesson details */}\r\n                                    <div className=\"current-lesson__top-details-edit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"update\" \r\n                                            modalName = \"modifyLesson\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/edit-icon.svg\"\r\n                                            onSubmit={updateDetails} \r\n                                            information={currentLesson}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className = \"client__contact-map\">\r\n                                    <Map\r\n                                        mapLocation={mapLocation}\r\n                                        containerSize={{width:\"346px\", height:\"268px\"}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"lesson-divider\"></div>\r\n\r\n                            <h2 className=\"section-title section-title-resources\">Resources</h2>\r\n                            \r\n                            {/* renders the resource section for the lessons */}\r\n                            <LessonResources programs={programs} currentLesson={currentLesson} currentClient={currentClient}/>\r\n                    \r\n                            {/* renders the notes and the homework section */}\r\n                            <div className=\"current-lesson__bottom\">\r\n                                <div className = \"client__notes\" style={{backgroundImage: \"url('/images/notePaper.png')\"}}>\r\n                                    <div className=\"client__notes-submit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"note\" \r\n                                            modalName = \"addNote\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/add-note.svg\" \r\n                                            information = {currentLesson.notes}\r\n                                            onSubmit={addListItem} \r\n                                        />\r\n                                    </div>\r\n                                    <div className = \"client__notes-body\">\r\n                                        <p className=\"client__notes-title\">Lesson Notes ...</p>\r\n                                        <div className=\"client__notes-text\"> {currentLesson.notes}</div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className = \"client__notes\" style={{backgroundImage: \"url('/images/notePaper.png')\"}}>\r\n                                    <div className=\"client__notes-submit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"note\" \r\n                                            modalName = \"addHomework\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/add-note.svg\" \r\n                                            information = {currentLesson.homework}\r\n                                            onSubmit={addListItem} \r\n                                        />\r\n                                    </div>\r\n                                    <div className = \"client__notes-body\">\r\n                                        <p className=\"client__notes-title\">Homework ...</p>\r\n                                        <div className=\"client__notes-text\"> {currentLesson.homework}</div>\r\n                                    </div>    \r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </PageLayout> \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClientLessons\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ProgramDetails\\ProgramDetails.jsx",["174"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Lessons\\Lessons.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\NextLesson\\NextLesson.jsx",["175"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\trainer-context.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\EmptyPage\\EmptyPage.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\firebase.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PageLayout\\PageLayout.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Map\\Map.jsx",["176"],"import React, {useState, useCallback} from 'react';\r\nimport {GoogleMap, Marker, InfoWindow, useJsApiLoader} from '@react-google-maps/api';\r\n\r\nimport mapStyles from '../../mapStyles';\r\n\r\nconst Map = ({mapLocation, containerSize}) => {\r\n \r\n    const [showInfo, setShowInfo]=useState(false);\r\n    const [map, setMap] = useState(null);\r\n\r\n    const {isLoaded,loadError} = useJsApiLoader({\r\n        id:'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\r\n    })\r\n\r\n    const onLoad = useCallback(map=>{\r\n        const bounds = new window.google.maps.LatLngBounds();\r\n        map.fitBounds(bounds);\r\n        setMap(map);\r\n    },[]);\r\n\r\n    const onUnmount = useCallback(map=>{\r\n        setMap(null)\r\n    },[]);\r\n\r\n    if (loadError) {\r\n        return <div>Map cannot be loaded right now, sorry.</div>\r\n      }\r\n\r\n    return isLoaded ? (\r\n        <GoogleMap \r\n            center={mapLocation}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n            options={{styles:mapStyles, zoomControl:false, mapTypeControl:false, minZoom:15}}\r\n            mapContainerStyle={containerSize}\r\n        >\r\n\r\n        <Marker \r\n            position={mapLocation} \r\n            onClick={()=>{setShowInfo(true)}}\r\n            // icon={{\r\n            //     url:\"/icons/map-marker.svg\",\r\n            //     scaledSize: new window.google.maps.Size(20,40)\r\n            // }}\r\n        /> \r\n\r\n        {showInfo &&\r\n            <InfoWindow \r\n                position={{lat:mapLocation.lat, lng:mapLocation.lng}}\r\n                onCloseClick={()=>{setShowInfo(false)}}\r\n                >\r\n                <div>\r\n                    <h2>Lesson details</h2>\r\n                    <p> Lesson Name</p>\r\n                </div>\r\n            </InfoWindow>\r\n        }\r\n        </GoogleMap>\r\n    ):<></>\r\n}\r\n\r\nexport default React.memo(Map)\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\GridList\\GridList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientNav\\ClientNav.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx",["177"],"import React, {useState, useEffect}  from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useDrop} from 'react-dnd';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {API_URL} from '../../App';\r\n\r\nimport './LessonResources.scss'\r\n\r\nimport DNDList from '../../components/DNDList/DNDList';\r\nimport AppliedResources from '../../components/AppliedResources/AppliedResources';\r\n\r\n/**\r\n * \r\n * @param {Object} programs - all the trainer's programs\r\n * @param {Object} currentLesson - lesson currently rendered\r\n * @param {Object} currentClient - client currently rendered\r\n */\r\n\r\nfunction LessonResources({programs, currentLesson, currentClient}) {\r\n\r\n    const ItemTypes = {\r\n        CARD:'card',\r\n    };\r\n\r\n    const {trainerId} = useParams();\r\n\r\n    const [allResources, setAllResources] = useState(programs);\r\n    \r\n    //resources that are currently being displayed - change based on program chosen\r\n    const[displayResources, setResourceList] = useState(programs.length!==0 ? programs[0].resources : []);\r\n\r\n    //current lesson being rendered - changed based on drag and drop from available resources \r\n    const[currentLessonResources, updateCurrentLesson] = useState(currentLesson);\r\n\r\n    const [activeResource, setActiveResource] = useState(programs[0].id);\r\n\r\n       \r\n     //update the resources of the current lesson when state changes\r\n    useEffect(() => {\r\n        updateCurrentLesson(currentLesson);\r\n    },[currentLesson]);\r\n\r\n    // update the resources being displayed when a program is chosen\r\n    const updateDisplayed = (program)=>{\r\n        setActiveResource(program.id);\r\n        setResourceList(program.resources);\r\n    }\r\n\r\n    //used to remove a resource from the available resources and add it to the lesson resources\r\n    const markAsDone = id => {\r\n\r\n        const sameBox = currentLessonResources.resources.find(resource=> resource.id===id);\r\n\r\n        if (!sameBox){\r\n            //find the resource to update and set the applied status to true        \r\n            const displays = [...displayResources];\r\n            displays.find(resource=> resource.id === id).applied=true;\r\n                \r\n            const lessonObject = {...currentLessonResources};\r\n            \r\n            // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n\r\n            lessonObject.resources.push(displays.find(resource=> resource.id === id));\r\n\r\n            //update the displaye resources and the lesson resources that are rendered\r\n            setResourceList(displays);\r\n            updateCurrentLesson(lessonObject);\r\n\r\n            //create an array of the ids associated with the updated resources to push to the db\r\n            // const updatedResources = lessonObject.resources.map(resource => resource)\r\n\r\n            //update the db with the new lesson resources\r\n            axios.put(`${API_URL}/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, [...lessonObject.resources])\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const removeResource=(id)=>{\r\n        \r\n        const alreadyDisplayed = displayResources.find(resource=> resource.id===id);\r\n        const sameBox = !!alreadyDisplayed && alreadyDisplayed.applied===false;\r\n\r\n        if(!sameBox){\r\n            //find the resource to update and set the applied status to true        \r\n            const available = [...allResources];\r\n            available.forEach(program=>{\r\n                const foundResource = program.resources.find(resource=> resource.id === id)\r\n                if(foundResource){ \r\n                    foundResource.applied=false;\r\n                }\r\n            });\r\n\r\n            const lessonObject = {...currentLessonResources};\r\n            // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n            const index = lessonObject.resources.findIndex(resource => resource.id === id);\r\n            lessonObject.resources.splice(index,1);\r\n\r\n            //update the display resources and the lesson resources that are rendered\r\n            setAllResources(available);\r\n            updateCurrentLesson(lessonObject);\r\n\r\n            //create an array of the ids associated with the updated resources to push to the db\r\n            // const updatedResources = lessonObject.resources.map(resource => resource);\r\n            /********************************************************************************************************************* */\r\n            const updatedResources = [...lessonObject.resources];\r\n\r\n            // update the db with the new lesson resources\r\n            axios.put(`${API_URL}/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    //setup for drop component from lessons ---> available\r\n    const[{isOver}, drop] = useDrop({\r\n        accept: ItemTypes.CARD, //required - tells drop zone it will only accept card components\r\n        drop: (item, monitor)=> removeResource(item.id),\r\n        // collect: monitor => ({\r\n        //     isOver: !!monitor.isOver(),\r\n        // }),\r\n    });\r\n\r\n//program list scrolling\r\n    function sideScroll(element,direction,speed,distance,step){\r\n        let scrollAmount = 0;\r\n        var slideTimer = setInterval(function(){\r\n            if(direction === 'left'){\r\n                element.scrollLeft -= step;\r\n            } else {\r\n                element.scrollLeft += step;\r\n            }\r\n            scrollAmount += step;\r\n            if(scrollAmount >= distance){\r\n                window.clearInterval(slideTimer);\r\n            }\r\n        }, speed);\r\n    }\r\n\r\n    const scrollContainer = document.querySelector('.current-lesson__available-programs');\r\n\r\n    if (!!scrollContainer){\r\n        scrollContainer.addEventListener('wheel', function(e) {\r\n            e.preventDefault();\r\n            if (e.deltaY > 0) sideScroll(scrollContainer,'left',25,100,10);\r\n            else sideScroll(scrollContainer,'right',25,100,10);\r\n        });\r\n    }\r\n\r\n    const scrollList = (direction)=>{\r\n        const scrollContainer = document.querySelector('.current-lesson__available-programs');\r\n        direction ===\"right\" ? sideScroll(scrollContainer,'right',25,100,10): sideScroll(scrollContainer,'left',25,100,10);\r\n    }\r\n\r\n    if(programs.length===0){\r\n        return(                                     \r\n             <div className=\"empty-container empty-lesson__resources\">\r\n                <h2>You Don't have any Programs Yet!</h2>\r\n                <Link to={`/trainer/${trainerId}/programs`} className=\"empty-lesson__resources-link\">Click Here to Add Some Programs and Resources</Link>\r\n            </div>\r\n        )\r\n    \r\n    }else{\r\n\r\n        return (\r\n            <div className=\"current-lesson__resources\">  \r\n                <div className=\"current-lesson__available\">\r\n                    {/* <p>Available Resources</p> */}\r\n                    <div className=\"current-lesson__available-content\">\r\n                        <div className=\"scroll-container\">\r\n                            <img src=\"/icons/chevron-left.svg\" className=\"chevron-left\" alt=\"scroll left\" onClick={()=>{scrollList(\"left\")}}/>\r\n                            <ul className=\"current-lesson__available-programs\"> \r\n                                {programs.map((program,i) => \r\n                                    <Link key={program.id} to={`/trainer/${trainerId}/clients/${currentClient.userId}/lessons`}>\r\n                                        <li id={program.id} onClick={()=>updateDisplayed(program)} \r\n                                            className={activeResource === program.id ? \"current-lesson__available-programs-item active-program\" : \"current-lesson__available-programs-item\"}>{program.name}\r\n                                        </li>\r\n                                    </Link>)}\r\n                            </ul>\r\n                            <img src=\"/icons/chevron-left.svg\" className=\"chevron-right\" alt=\"scroll right\" onClick={()=>{scrollList(\"right\")}}/>\r\n                        </div>\r\n                        <div ref={drop} className=\"list current-lesson__available-resources\">\r\n                            {displayResources.filter(resource => resource.applied === false)\r\n                                .map(resource=> <DNDList key={resource.id} content={resource.name} link={resource.link} id={resource.id}/>)}\r\n                        </div>                \r\n                    </div>\r\n                </div>\r\n                {/* applied resources component set up as a drop component */}\r\n                <AppliedResources currentLesson={currentLessonResources} markAsDone={markAsDone}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LessonResources\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\mapStyles.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Modal\\Modal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx",["178","179"],"import React from 'react'\r\nimport './LessonDetailsForm.scss';\r\n\r\nfunction LessonDetailsForm({onSubmit, closeModal, lesson}) {\r\n    \r\n    if (!lesson){\r\n        var location = {name:\"\", address:\"\", city:\"\", province:\"\", country:\"\"}\r\n        var lesson = {date:\"\", time:\"\", location, id:\"\"}\r\n    }\r\n    var {date, time, location} = lesson;\r\n    var {name,address, city, province, country} = location;   \r\n\r\n    const handleSubmit=(event, lessonId)=>{\r\n        onSubmit(event, lessonId);\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <form id=\"modal-form\" className=\"modal-form\" onSubmit={(event)=>handleSubmit(event, lesson.id)} >\r\n\r\n            <div className=\"modal-form__when\">\r\n                <div className=\"modal-form__section modal-form__lesson-name\">\r\n                    <input className=\"modal-form__input\" id=\"lessonName\" name=\"lessonName\" type=\"text\" defaultValue={lesson.name} required></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"fname\">Lesson Name</label>\r\n                </div>\r\n     \r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--date \" id=\"date\" name=\"date\" type=\"date\"  defaultValue={date}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"date\">Date</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">   \r\n                    <input className=\"modal-form__input modal-form__input--time\" id=\"time\" name=\"time\" type=\"time\"  defaultValue={time}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"time\">Time</label>\r\n                </div>    \r\n            </div>\r\n\r\n            <div className=\"modal-form__section modal-form__lesson-name\">\r\n                <input className=\"modal-form__input\" id=\"locationName\" name=\"locationName\" type=\"text\" defaultValue={name}></input>\r\n                <label className=\"modal-form__label\" htmlFor=\"locationName\">Location Name</label>\r\n            </div>\r\n            \r\n            <div className=\"modal-form__address\">\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--address\" id=\"address\" name=\"address\" type=\"text\" placeholder=\"Address\" defaultValue={address} ></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"address\">Street</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input \" id=\"city\" name=\"city\" type=\"text\" placeholder=\"City\" defaultValue={city}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"city\">City</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--province\" id=\"province\" name=\"province\" type=\"text\" placeholder=\"Province\" defaultValue={province}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"province\">Province</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--country\" id=\"country\" name=\"country\" type=\"text\" placeholder=\"Country\" defaultValue={country}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"country\">Country</label>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-form__submit\">\r\n                <button className=\"modal-form__submit-cancel\" type=\"button\" onClick={closeModal}>Cancel</button>\r\n                <button className=\"modal-form__submit-button\" id=\"submit\" type=\"submit\" form=\"modal-form\">Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LessonDetailsForm","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx",["180"],"import React from 'react'\r\nimport \"./NewProgramForm.scss\";\r\n\r\nfunction NewProgramForm({onSubmit, closeModal, information}) {\r\n    \r\n    if (!information){\r\n        var information = {name:\"\", description:\"\"}\r\n    }\r\n\r\n    const {name, description} = information;\r\n\r\n    const handleSubmit=(event)=>{\r\n        onSubmit(event);\r\n        closeModal();\r\n    }\r\n    return (\r\n        <form id=\"modal-form\" className=\"modal-form\" onSubmit={handleSubmit} >\r\n            <div className=\"new-program__input\">\r\n                <input className=\"modal-form__input new-program__text\" id=\"programName\" name=\"programName\" type=\"text\" defaultValue={name} placeholder=\"Enter Program Name\" required></input>\r\n                <textarea className=\"modal-form__input new-program__textarea\" form=\"modal-form\" wrap=\"hard\" name=\"programDescription\" id=\"programDescription\" defaultValue={description} placeholder=\"Enter Program Description\" rows=\"10\" cols=\"120\"></textarea>\r\n            </div>\r\n            \r\n            <div className=\"modal-form__submit\">\r\n                <button className=\"modal-form__submit-cancel\" type=\"button\" onClick={closeModal}>Cancel</button>\r\n                <button className=\"modal-form__submit-button\" id=\"submit\" type=\"submit\" form=\"modal-form\">Submit</button>\r\n            </div>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewProgramForm\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx",[],{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":25,"column":7,"nodeType":"187","endLine":25,"endColumn":9,"suggestions":"188"},{"ruleId":"185","severity":1,"message":"189","line":41,"column":11,"nodeType":"190","endLine":75,"endColumn":6},{"ruleId":"191","severity":1,"message":"192","line":82,"column":5,"nodeType":"193","endLine":82,"endColumn":68},{"ruleId":"185","severity":1,"message":"194","line":47,"column":7,"nodeType":"187","endLine":47,"endColumn":17,"suggestions":"195"},{"ruleId":"185","severity":1,"message":"196","line":50,"column":8,"nodeType":"187","endLine":50,"endColumn":70,"suggestions":"197"},{"ruleId":"185","severity":1,"message":"198","line":68,"column":8,"nodeType":"187","endLine":68,"endColumn":47,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":125,"column":11,"nodeType":"202","messageId":"203","endLine":125,"endColumn":21},{"ruleId":"185","severity":1,"message":"204","line":41,"column":7,"nodeType":"187","endLine":41,"endColumn":9,"suggestions":"205"},{"ruleId":"200","severity":1,"message":"206","line":9,"column":12,"nodeType":"202","messageId":"203","endLine":9,"endColumn":15},{"ruleId":"200","severity":1,"message":"207","line":120,"column":12,"nodeType":"202","messageId":"203","endLine":120,"endColumn":18},{"ruleId":"208","severity":1,"message":"209","line":8,"column":13,"nodeType":"202","messageId":"210","endLine":8,"endColumn":19},{"ruleId":"208","severity":1,"message":"211","line":10,"column":22,"nodeType":"202","messageId":"210","endLine":10,"endColumn":30},{"ruleId":"208","severity":1,"message":"212","line":7,"column":13,"nodeType":"202","messageId":"210","endLine":7,"endColumn":24},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTrainerId' and 'trainerId'. Either include them or remove the dependency array.","ArrayExpression",["215"],"The 'fileUpload' function makes the dependencies of useEffect Hook (at line 80) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fileUpload' in its own useCallback() Hook.","VariableDeclarator","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'address', 'city', and 'province'. Either include them or remove the dependency array.",["216"],"React Hook useEffect has missing dependencies: 'geoCode', 'setTrainerId', and 'trainerId'. Either include them or remove the dependency array.",["217"],"React Hook useEffect has missing dependencies: 'clientId', 'geoCode', 'programs', 'setTrainerId', and 'trainerId'. Either include them or remove the dependency array.",["218"],"no-unused-vars","'addProgram' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'address', 'city', 'clientId', and 'province'. Either include them or remove the dependency array.",["219"],"'map' is assigned a value but never used.","'isOver' is assigned a value but never used.","no-redeclare","'lesson' is already defined.","redeclared","'location' is already defined.","'information' is already defined.","no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"222","fix":"228"},"Update the dependencies array to be: [setTrainerId, trainerId]",{"range":"229","text":"230"},"Update the dependencies array to be: [address, city, clientId, province]",{"range":"231","text":"232"},"Update the dependencies array to be: [programs, clients, clientId, currentClient, setCurrentClient, setTrainerId, trainerId, geoCode]",{"range":"233","text":"234"},"Update the dependencies array to be: [currentClient, currentLesson, clients, setTrainerId, trainerId, clientId, geoCode, programs]",{"range":"235","text":"236"},{"range":"237","text":"232"},[720,722],"[setTrainerId, trainerId]",[1488,1498],"[address, city, clientId, province]",[1776,1838],"[programs, clients, clientId, currentClient, setCurrentClient, setTrainerId, trainerId, geoCode]",[2952,2991],"[currentClient, currentLesson, clients, setTrainerId, trainerId, clientId, geoCode, programs]",[1393,1395]]