[{"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\index.js":"1","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\reportWebVitals.js":"2","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\App.js":"3","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx":"4","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Client\\Client.jsx":"5","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx":"6","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Lessons\\Lessons.jsx":"7","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientWelcome\\ClientWelcome.jsx":"8","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\NextLesson\\NextLesson.jsx":"9","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\EmptyPage\\EmptyPage.jsx":"10","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx":"11","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx":"12","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx":"13","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx":"14","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx":"15","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\firebase.js":"16","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\event-utils.js":"17","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\GridList\\GridList.jsx":"18","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Map\\Map.jsx":"19","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx":"20","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx":"21","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx":"22","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Modal\\Modal.jsx":"23","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx":"24","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx":"25","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\mapStyles.js":"26","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx":"27","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx":"28","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx":"29","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx":"30","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx":"31","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx":"32","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx":"33","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx":"34","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\trainer-context.js":"35","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\TrainerProvider.js":"36","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientNav\\ClientNav.jsx":"37","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientLessons\\ClientLessons.jsx":"38","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientProfile\\ClientProfile.jsx":"39","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ProgramDetails\\ProgramDetails.jsx":"40","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PageLayout\\PageLayout.jsx":"41"},{"size":479,"mtime":1609516748053,"results":"42","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"44","hashOfConfig":"43"},{"size":3443,"mtime":1622920412779,"results":"45","hashOfConfig":"43"},{"size":1401,"mtime":1612381285891,"results":"46","hashOfConfig":"43"},{"size":1709,"mtime":1622907451134,"results":"47","hashOfConfig":"43"},{"size":8682,"mtime":1622899743052,"results":"48","hashOfConfig":"43"},{"size":5363,"mtime":1622921347480,"results":"49","hashOfConfig":"43"},{"size":7359,"mtime":1622921415993,"results":"50","hashOfConfig":"43"},{"size":5487,"mtime":1622921341606,"results":"51","hashOfConfig":"43"},{"size":1826,"mtime":1622897514739,"results":"52","hashOfConfig":"43"},{"size":684,"mtime":1622901872985,"results":"53","hashOfConfig":"43"},{"size":724,"mtime":1622901894369,"results":"54","hashOfConfig":"43"},{"size":3091,"mtime":1616241298443,"results":"55","hashOfConfig":"43"},{"size":3761,"mtime":1621616705523,"results":"56","hashOfConfig":"43"},{"size":3418,"mtime":1622920311161,"results":"57","hashOfConfig":"43"},{"size":457,"mtime":1612972896192,"results":"58","hashOfConfig":"43"},{"size":394,"mtime":1613072882338,"results":"59","hashOfConfig":"43"},{"size":3171,"mtime":1621787893729,"results":"60","hashOfConfig":"43"},{"size":1849,"mtime":1613397892924,"results":"61","hashOfConfig":"43"},{"size":6043,"mtime":1622832787351,"results":"62","hashOfConfig":"43"},{"size":2500,"mtime":1621616231628,"results":"63","hashOfConfig":"43"},{"size":5890,"mtime":1621704936555,"results":"64","hashOfConfig":"43"},{"size":3657,"mtime":1621616297482,"results":"65","hashOfConfig":"43"},{"size":2184,"mtime":1612182661122,"results":"66","hashOfConfig":"43"},{"size":1207,"mtime":1621616371378,"results":"67","hashOfConfig":"43"},{"size":3603,"mtime":1613395492156,"results":"68","hashOfConfig":"43"},{"size":8992,"mtime":1622900505216,"results":"69","hashOfConfig":"43"},{"size":1670,"mtime":1613154893118,"results":"70","hashOfConfig":"43"},{"size":5503,"mtime":1621001051508,"results":"71","hashOfConfig":"43"},{"size":1366,"mtime":1612190047381,"results":"72","hashOfConfig":"43"},{"size":3837,"mtime":1621789891886,"results":"73","hashOfConfig":"43"},{"size":9973,"mtime":1621616447043,"results":"74","hashOfConfig":"43"},{"size":1284,"mtime":1613143137627,"results":"75","hashOfConfig":"43"},{"size":1589,"mtime":1611882658451,"results":"76","hashOfConfig":"43"},{"size":196,"mtime":1621898685900,"results":"77","hashOfConfig":"43"},{"size":3460,"mtime":1622896811004,"results":"78","hashOfConfig":"43"},{"size":3302,"mtime":1622831733023,"results":"79","hashOfConfig":"43"},{"size":16976,"mtime":1622901858410,"results":"80","hashOfConfig":"43"},{"size":9923,"mtime":1622901847442,"results":"81","hashOfConfig":"43"},{"size":17757,"mtime":1622901635205,"results":"82","hashOfConfig":"43"},{"size":369,"mtime":1622901762730,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"lesuvl",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"86"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"86"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\index.js",[],["178","179"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\reportWebVitals.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\App.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Client\\Client.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx",["180","181"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport axios from 'axios';\r\n\r\nimport \"./Trainer.scss\"\r\n\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport {API_URL} from '../../App';\r\n\r\n\r\nconst Trainer = () => {\r\n\r\n    const {userProfile, setUserProfile, setTrainerId, updateUserProfile} = useContext(TrainerContext);\r\n\r\n    const {trainerId} = useParams();\r\n\r\n    //store the selected file in state\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        setTrainerId(trainerId);\r\n    },[]);\r\n\r\n   /** ================================================ ADD LOGO ================================================*/\r\n\r\n   //activate the click method on the invisible input box when the logo is clicked \r\n   const activateFileSelector=()=>{\r\n        const inputBox = document.getElementById('inputFile');\r\n        inputBox.click();\r\n    }\r\n    \r\n    //get the file selected from the file picker and store it in state\r\n    const fileSelectedHandler = event =>{\r\n        setSelectedFile(event.target.files[0]); \r\n    }\r\n\r\n    //upload the logo file to firebase storage in the trainer's\r\n    const fileUpload=()=>{\r\n        if(!!selectedFile){\r\n            let bucketName = trainerId;\r\n            let storageRef = firebase.storage().ref(`/${bucketName}/${selectedFile.name}`);\r\n            let uploadTask = storageRef.put(selectedFile);\r\n            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n                ()=>{\r\n                    console.log(\"Uploading ...\")\r\n                },\r\n                ()=>{\r\n                    console.log(\"Upload Unsuccessful\");\r\n                },\r\n                ()=>{\r\n                    //once the file is uploaded get the url and save it to the db and update the trainer component\r\n                    let storageLoc = firebase.storage().ref();\r\n                    storageLoc.child(`/${bucketName}/${selectedFile.name}`).getDownloadURL()\r\n                    .then((url)=>{\r\n                        const logo={logo:url}\r\n                        axios.put(`${API_URL}/trainer/${trainerId}/updateLogo`, logo)\r\n                        .then(res =>{\r\n                            const profileCopy = {...userProfile};\r\n                            profileCopy.company.logo = res.data;\r\n                            setUserProfile(profileCopy);\r\n                        })\r\n                        .catch(err=>{\r\n                            console.log(err);\r\n                        })\r\n                    })\r\n                    .catch(err=>{\r\n                        console.log(err);\r\n                    })\r\n                }   \r\n            )\r\n        }\r\n    }\r\n\r\n    //fire the fileupload function any time the selectedFile is changed in state\r\n    useEffect(()=>{\r\n        fileUpload();\r\n    },[selectedFile, fileUpload])\r\n\r\n\r\n    const {lname,fname,username,password,email,phone,address,city,province,country,postal} = userProfile ? userProfile.contact : {};\r\n    const {facebook, twitter, instagram, linkedIn} = userProfile ? userProfile.social : {};\r\n    const {name, description, logo} = userProfile ? userProfile.company : {};\r\n\r\n     //show the password as *****\r\n     const hiddenPassword = password && password.split(\"\").map(character => \"*\");\r\n   \r\n    return (\r\n        <>\r\n            {userProfile &&  \r\n                <div className=\"user-profile\" style={{backgroundImage: \"url('/images/main2.jfif')\"}}>\r\n                    <p className=\"user-profile__type\">Profile: Trainer</p>\r\n                    <div className=\"user-profile__bottom\">\r\n                        <div className=\"user-profile__description\">\r\n                        \r\n                            <div className=\"user-profile__description-logo-container\">\r\n\r\n                                {/* render the logo from the db - if there isn't one use the image icon stored on the front end */}\r\n                                <img src={logo !==\"\" ? logo : \"/icons/image.svg\"} alt =\"company logo\" className=\"user-profile__description-logo\" onClick={activateFileSelector}/>\r\n                                \r\n                                <input id=\"inputFile\" type=\"file\" className=\"user-profile__description-input\" onChange={fileSelectedHandler}></input>\r\n\r\n                            </div>\r\n                            <div className=\"user-profile__description-content\">\r\n                                <p className=\"user-profile__description-company\">{name}</p>\r\n                                <p className=\"user-profile__description-description\">{description}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"component user-profile__container\">\r\n                            <p className=\"component-title user-profile__title\">{`${fname} ${lname}`}</p>\r\n                            \r\n                            {(username !==\"google\" && username !==\"facebook\") &&\r\n                            <div className=\"user-profile__sign-in\">                       \r\n                                <p className=\"user-label\" >UserName: </p>\r\n                                <p className=\"user-text\"> {username}</p>\r\n\r\n                                <p className=\"user-label\" >Password: </p>\r\n                                <p className=\"user-text\"> {hiddenPassword}</p>\r\n                            </div>\r\n                            }\r\n\r\n                            <div className=\"user-profile__details\">\r\n                                <div className=\"user-profile__contact\">\r\n                                    <p className=\"user-label user-profile__contact-title\"> CONTACT </p> \r\n                                    <div className=\"user-profile-item\">\r\n                                        <img className=\"contact-icon\" src=\"/icons/email-icon.svg\" alt=\"email\"/><p>{email}</p>\r\n                                    </div>\r\n                                    <div className=\"user-profile-item\">\r\n                                        <img className=\"contact-icon\" src=\"/icons/phone-icon.svg\" alt=\"phone number\"/><p>{phone}</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"user-profile__social\">\r\n                                        <a href={facebook} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/facebook-icon.svg\" alt=\"facebook\"/></a>\r\n                                        <a href={twitter} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/twitter-icon.svg\" alt=\"twitter\"/></a>\r\n                                        <a href={instagram} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/instagram-icon.svg\" alt=\"instagram\"/></a>\r\n                                        <a href={linkedIn} target=\"_blank\" rel=\"noopener noreferrer\"><img className=\"contact-icon--social\" src=\"/icons/linkedin-icon.svg\" alt=\"linked-in\"/></a>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"user-profile__address\">\r\n                                        <p className=\"user-label user-profile__address-title\">ADDRESS</p>\r\n                                        <p className=\"user-profile__address-item\">{address}</p>\r\n                                        <p className=\"user-profile__address-item\">{`${city}, ${province}, ${country}`}</p>\r\n                                        <p className=\"user-profile__address-item\">{postal}</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* render the modalcontainer along with the button used to trigger it for updating the user profile */}\r\n                            <div className=\"user-profile__update\">\r\n                                <ModalContainer \r\n                                    modalName = \"updateUser\" \r\n                                    modalType = \"update\" \r\n                                    buttonText=\"Update\" \r\n                                    buttonType=\"image\" \r\n                                    url=\"/icons/user-edit.svg\" \r\n                                    information={userProfile} onSubmit={updateUserProfile}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Trainer\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Lessons\\Lessons.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientWelcome\\ClientWelcome.jsx",["182"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\NextLesson\\NextLesson.jsx",["183"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\EmptyPage\\EmptyPage.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx",["184"],"import React, {useContext} from 'react';\r\nimport {useRouteMatch, Redirect} from 'react-router-dom';\r\n\r\nimport \"./Clients.scss\";\r\n\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport EmptyPage from '../EmptyPage/EmptyPage';\r\nimport PageLayout from '../../components/PageLayout/PageLayout';\r\n\r\nfunction Clients() {\r\n\r\n    const {clients} = useContext(TrainerContext);\r\n    const {url} = useRouteMatch();\r\n\r\n    return (\r\n        <>\r\n            {!!clients &&\r\n                <PageLayout> \r\n                    {clients.length === 0 ? <h1>No Clients</h1> : <Redirect to={`${url}/${clients[0].userId}/profile`}/>}\r\n                </PageLayout>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Clients\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx",["185"],"import React from 'react'\r\n// import \"./Schedule.scss\"\r\n// import { INITIAL_EVENTS, createEventId } from './event-utils'\r\n\r\n\r\n// import FullCalendar, { formatDate } from '@fullcalendar/react'\r\n// import dayGridPlugin from '@fullcalendar/daygrid'\r\n// import timeGridPlugin from '@fullcalendar/timegrid'\r\n// import interactionPlugin from '@fullcalendar/interaction'\r\n\r\n\r\nfunction Schedule() {\r\n\r\n\r\n\r\n    // const handleDateSelect = (selectInfo) => {\r\n    //     console.log(selectInfo)\r\n    //     let title = prompt('Please enter a new title for your event')\r\n    //     let calendarApi = selectInfo.view.calendar\r\n\r\n    //     calendarApi.unselect() // clear date selection\r\n\r\n    //     if (title) {\r\n    //         calendarApi.addEvent({\r\n    //         id: createEventId(),\r\n    //         title,\r\n    //         start: selectInfo.startStr,\r\n    //         end: selectInfo.endStr,\r\n    //         allDay: selectInfo.allDay\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // const handleEventClick = (clickInfo) => {\r\n    //     if (alert(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n    //       clickInfo.event.remove()\r\n    //     }\r\n    //   }\r\n    \r\n    // const handleEvents = (events) => {\r\n    //     // this.setState({\r\n    //     //   currentEvents: events\r\n    //     // })\r\n    //   }\r\n    \r\n    // function renderEventContent(eventInfo) {\r\n    //   return (\r\n    //     <>\r\n    //       <b>{eventInfo.timeText}</b>\r\n    //       <i>{eventInfo.event.title}</i>\r\n    //     </>\r\n    //   )\r\n    // }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"schedule\" style={{backgroundImage: \"url('/images/main2.jfif')\"}}>\r\n                {/* <FullCalendar\r\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                    headerToolbar={{\r\n                    left: 'prev,next today',\r\n                    center: 'title',\r\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                    }}\r\n                    initialView='dayGridMonth'\r\n                    editable={true}\r\n                    selectable={true}\r\n                    selectMirror={true}\r\n                    dayMaxEvents={true}\r\n                    //weekends={this.state.weekendsVisible}\r\n                    initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n                    select={handleDateSelect}\r\n                    eventContent={renderEventContent} // custom render function\r\n                    eventClick={handleEventClick}\r\n                    eventsSet={handleEvents} // called after events are initialized/added/changed/removed\r\n                    /* you can update a remote database when these fire:\r\n                    eventAdd={function(){}}\r\n                    eventChange={function(){}}\r\n                    eventRemove={function(){}}\r\n                    */}\r\n                {/* /> */}\r\n\t\t\t\t<img className=\"construction\" src=\"/images/construction.jfif\"/>\r\n            </div>            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Schedule","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\firebase.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\Schedule\\event-utils.js",[],["186","187"],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\GridList\\GridList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Map\\Map.jsx",["188"],"import React, {useState, useCallback} from 'react';\r\nimport {GoogleMap, Marker, InfoWindow, useJsApiLoader} from '@react-google-maps/api';\r\n\r\nimport mapStyles from '../../mapStyles';\r\n\r\nconst Map = ({mapLocation, containerSize}) => {\r\n \r\n    const [showInfo, setShowInfo]=useState(false);\r\n    const [map, setMap] = useState(null);\r\n\r\n    const {isLoaded,loadError} = useJsApiLoader({\r\n        id:'google-map-script',\r\n        googleMapsApiKey: process.env.REACT_APP_GOOGLE_KEY\r\n    })\r\n\r\n    const onLoad = useCallback(map=>{\r\n        const bounds = new window.google.maps.LatLngBounds();\r\n        map.fitBounds(bounds);\r\n        setMap(map);\r\n    },[]);\r\n\r\n    const onUnmount = useCallback(map=>{\r\n        setMap(null)\r\n    },[]);\r\n\r\n    if (loadError) {\r\n        return <div>Map cannot be loaded right now, sorry.</div>\r\n      }\r\n\r\n    return isLoaded ? (\r\n        <GoogleMap \r\n            center={mapLocation}\r\n            onLoad={onLoad}\r\n            onUnmount={onUnmount}\r\n            options={{styles:mapStyles, zoomControl:false, mapTypeControl:false, minZoom:15}}\r\n            mapContainerStyle={containerSize}\r\n        >\r\n\r\n        <Marker \r\n            position={mapLocation} \r\n            onClick={()=>{setShowInfo(true)}}\r\n            // icon={{\r\n            //     url:\"/icons/map-marker.svg\",\r\n            //     scaledSize: new window.google.maps.Size(20,40)\r\n            // }}\r\n        /> \r\n\r\n        {showInfo &&\r\n            <InfoWindow \r\n                position={{lat:mapLocation.lat, lng:mapLocation.lng}}\r\n                onCloseClick={()=>{setShowInfo(false)}}\r\n                >\r\n                <div>\r\n                    <h2>Lesson details</h2>\r\n                    <p> Lesson Name</p>\r\n                </div>\r\n            </InfoWindow>\r\n        }\r\n        </GoogleMap>\r\n    ):<></>\r\n}\r\n\r\nexport default React.memo(Map)\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\Modal\\Modal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\mapStyles.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx",["189"],"import React, {useState, useEffect}  from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport {useDrop} from 'react-dnd';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {API_URL} from '../../App';\r\n\r\nimport './LessonResources.scss'\r\n\r\nimport DNDList from '../../components/DNDList/DNDList';\r\nimport AppliedResources from '../../components/AppliedResources/AppliedResources';\r\n\r\n/**\r\n * \r\n * @param {Object} programs - all the trainer's programs\r\n * @param {Object} currentLesson - lesson currently rendered\r\n * @param {Object} currentClient - client currently rendered\r\n */\r\n\r\nfunction LessonResources({programs, currentLesson, currentClient}) {\r\n\r\n    const ItemTypes = {\r\n        CARD:'card',\r\n    };\r\n\r\n    const {trainerId} = useParams();\r\n\r\n    const [allResources, setAllResources] = useState(programs);\r\n    \r\n    //resources that are currently being displayed - change based on program chosen\r\n    const[displayResources, setResourceList] = useState(programs.length!==0 ? programs[0].resources : []);\r\n\r\n    //current lesson being rendered - changed based on drag and drop from available resources \r\n    const[currentLessonResources, updateCurrentLesson] = useState(currentLesson);\r\n\r\n    const [activeResource, setActiveResource] = useState(programs[0].id);\r\n\r\n       \r\n     //update the resources of the current lesson when state changes\r\n    useEffect(() => {\r\n        updateCurrentLesson(currentLesson);\r\n    },[currentLesson]);\r\n\r\n    // update the resources being displayed when a program is chosen\r\n    const updateDisplayed = (program)=>{\r\n        setActiveResource(program.id);\r\n        setResourceList(program.resources);\r\n    }\r\n\r\n    //used to remove a resource from the available resources and add it to the lesson resources\r\n    const markAsDone = id => {\r\n\r\n        const sameBox = currentLessonResources.resources.find(resource=> resource.id===id);\r\n\r\n        if (!sameBox){\r\n            //find the resource to update and set the applied status to true        \r\n            const displays = [...displayResources];\r\n            displays.find(resource=> resource.id === id).applied=true;\r\n                \r\n            const lessonObject = {...currentLessonResources};\r\n            \r\n            // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n\r\n            lessonObject.resources.push(displays.find(resource=> resource.id === id));\r\n\r\n            //update the displaye resources and the lesson resources that are rendered\r\n            setResourceList(displays);\r\n            updateCurrentLesson(lessonObject);\r\n\r\n            //create an array of the ids associated with the updated resources to push to the db\r\n            // const updatedResources = lessonObject.resources.map(resource => resource)\r\n\r\n            //update the db with the new lesson resources\r\n            axios.put(`${API_URL}/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, [...lessonObject.resources])\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const removeResource=(id)=>{\r\n        \r\n        const alreadyDisplayed = displayResources.find(resource=> resource.id===id);\r\n        const sameBox = !!alreadyDisplayed && alreadyDisplayed.applied===false;\r\n\r\n        if(!sameBox){\r\n            //find the resource to update and set the applied status to true        \r\n            const available = [...allResources];\r\n            available.forEach(program=>{\r\n                const foundResource = program.resources.find(resource=> resource.id === id)\r\n                if(foundResource){ \r\n                    foundResource.applied=false;\r\n                }\r\n            });\r\n\r\n            const lessonObject = {...currentLessonResources};\r\n            // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n            const index = lessonObject.resources.findIndex(resource => resource.id === id);\r\n            lessonObject.resources.splice(index,1);\r\n\r\n            //update the display resources and the lesson resources that are rendered\r\n            setAllResources(available);\r\n            updateCurrentLesson(lessonObject);\r\n\r\n            //create an array of the ids associated with the updated resources to push to the db\r\n            // const updatedResources = lessonObject.resources.map(resource => resource);\r\n            /********************************************************************************************************************* */\r\n            const updatedResources = [...lessonObject.resources];\r\n\r\n            // update the db with the new lesson resources\r\n            axios.put(`${API_URL}/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    //setup for drop component from lessons ---> available\r\n    const[{isOver}, drop] = useDrop({\r\n        accept: ItemTypes.CARD, //required - tells drop zone it will only accept card components\r\n        drop: (item, monitor)=> removeResource(item.id),\r\n        // collect: monitor => ({\r\n        //     isOver: !!monitor.isOver(),\r\n        // }),\r\n    });\r\n\r\n//program list scrolling\r\n    function sideScroll(element,direction,speed,distance,step){\r\n        let scrollAmount = 0;\r\n        var slideTimer = setInterval(function(){\r\n            if(direction === 'left'){\r\n                element.scrollLeft -= step;\r\n            } else {\r\n                element.scrollLeft += step;\r\n            }\r\n            scrollAmount += step;\r\n            if(scrollAmount >= distance){\r\n                window.clearInterval(slideTimer);\r\n            }\r\n        }, speed);\r\n    }\r\n\r\n    const scrollContainer = document.querySelector('.current-lesson__available-programs');\r\n\r\n    if (!!scrollContainer){\r\n        scrollContainer.addEventListener('wheel', function(e) {\r\n            e.preventDefault();\r\n            if (e.deltaY > 0) sideScroll(scrollContainer,'left',25,100,10);\r\n            else sideScroll(scrollContainer,'right',25,100,10);\r\n        });\r\n    }\r\n\r\n    const scrollList = (direction)=>{\r\n        const scrollContainer = document.querySelector('.current-lesson__available-programs');\r\n        direction ===\"right\" ? sideScroll(scrollContainer,'right',25,100,10): sideScroll(scrollContainer,'left',25,100,10);\r\n    }\r\n\r\n    if(programs.length===0){\r\n        return(                                     \r\n             <div className=\"empty-container empty-lesson__resources\">\r\n                <h2>You Don't have any Programs Yet!</h2>\r\n                <Link to={`/trainer/${trainerId}/programs`} className=\"empty-lesson__resources-link\">Click Here to Add Some Programs and Resources</Link>\r\n            </div>\r\n        )\r\n    \r\n    }else{\r\n\r\n        return (\r\n            <div className=\"current-lesson__resources\">  \r\n                <div className=\"current-lesson__available\">\r\n                    {/* <p>Available Resources</p> */}\r\n                    <div className=\"current-lesson__available-content\">\r\n                        <div className=\"scroll-container\">\r\n                            <img src=\"/icons/chevron-left.svg\" className=\"chevron-left\" alt=\"scroll left\" onClick={()=>{scrollList(\"left\")}}/>\r\n                            <ul className=\"current-lesson__available-programs\"> \r\n                                {programs.map((program,i) => \r\n                                    <Link key={program.id} to={`/trainer/${trainerId}/clients/${currentClient.userId}/lessons`}>\r\n                                        <li id={program.id} onClick={()=>updateDisplayed(program)} \r\n                                            className={activeResource === program.id ? \"current-lesson__available-programs-item active-program\" : \"current-lesson__available-programs-item\"}>{program.name}\r\n                                        </li>\r\n                                    </Link>)}\r\n                            </ul>\r\n                            <img src=\"/icons/chevron-left.svg\" className=\"chevron-right\" alt=\"scroll right\" onClick={()=>{scrollList(\"right\")}}/>\r\n                        </div>\r\n                        <div ref={drop} className=\"list current-lesson__available-resources\">\r\n                            {displayResources.filter(resource => resource.applied === false)\r\n                                .map(resource=> <DNDList key={resource.id} content={resource.name} link={resource.link} id={resource.id}/>)}\r\n                        </div>                \r\n                    </div>\r\n                </div>\r\n                {/* applied resources component set up as a drop component */}\r\n                <AppliedResources currentLesson={currentLessonResources} markAsDone={markAsDone}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LessonResources\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx",["190"],"import React from 'react'\r\nimport \"./NewProgramForm.scss\";\r\n\r\nfunction NewProgramForm({onSubmit, closeModal, information}) {\r\n    \r\n    if (!information){\r\n        var information = {name:\"\", description:\"\"}\r\n    }\r\n\r\n    const {name, description} = information;\r\n\r\n    const handleSubmit=(event)=>{\r\n        onSubmit(event);\r\n        closeModal();\r\n    }\r\n    return (\r\n        <form id=\"modal-form\" className=\"modal-form\" onSubmit={handleSubmit} >\r\n            <div className=\"new-program__input\">\r\n                <input className=\"modal-form__input new-program__text\" id=\"programName\" name=\"programName\" type=\"text\" defaultValue={name} placeholder=\"Enter Program Name\" required></input>\r\n                <textarea className=\"modal-form__input new-program__textarea\" form=\"modal-form\" wrap=\"hard\" name=\"programDescription\" id=\"programDescription\" defaultValue={description} placeholder=\"Enter Program Description\" rows=\"10\" cols=\"120\"></textarea>\r\n            </div>\r\n            \r\n            <div className=\"modal-form__submit\">\r\n                <button className=\"modal-form__submit-cancel\" type=\"button\" onClick={closeModal}>Cancel</button>\r\n                <button className=\"modal-form__submit-button\" id=\"submit\" type=\"submit\" form=\"modal-form\">Submit</button>\r\n            </div>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewProgramForm\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx",["191","192"],"import React from 'react'\r\nimport './LessonDetailsForm.scss';\r\n\r\nfunction LessonDetailsForm({onSubmit, closeModal, lesson}) {\r\n    \r\n    if (!lesson){\r\n        var location = {name:\"\", address:\"\", city:\"\", province:\"\", country:\"\"}\r\n        var lesson = {date:\"\", time:\"\", location, id:\"\"}\r\n    }\r\n    var {date, time, location} = lesson;\r\n    var {name,address, city, province, country} = location;   \r\n\r\n    const handleSubmit=(event, lessonId)=>{\r\n        onSubmit(event, lessonId);\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <form id=\"modal-form\" className=\"modal-form\" onSubmit={(event)=>handleSubmit(event, lesson.id)} >\r\n\r\n            <div className=\"modal-form__when\">\r\n                <div className=\"modal-form__section modal-form__lesson-name\">\r\n                    <input className=\"modal-form__input\" id=\"lessonName\" name=\"lessonName\" type=\"text\" defaultValue={lesson.name} required></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"fname\">Lesson Name</label>\r\n                </div>\r\n     \r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--date \" id=\"date\" name=\"date\" type=\"date\"  defaultValue={date}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"date\">Date</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">   \r\n                    <input className=\"modal-form__input modal-form__input--time\" id=\"time\" name=\"time\" type=\"time\"  defaultValue={time}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"time\">Time</label>\r\n                </div>    \r\n            </div>\r\n\r\n            <div className=\"modal-form__section modal-form__lesson-name\">\r\n                <input className=\"modal-form__input\" id=\"locationName\" name=\"locationName\" type=\"text\" defaultValue={name}></input>\r\n                <label className=\"modal-form__label\" htmlFor=\"locationName\">Location Name</label>\r\n            </div>\r\n            \r\n            <div className=\"modal-form__address\">\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--address\" id=\"address\" name=\"address\" type=\"text\" placeholder=\"Address\" defaultValue={address} ></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"address\">Street</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input \" id=\"city\" name=\"city\" type=\"text\" placeholder=\"City\" defaultValue={city}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"city\">City</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--province\" id=\"province\" name=\"province\" type=\"text\" placeholder=\"Province\" defaultValue={province}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"province\">Province</label>\r\n                </div>\r\n                <div className=\"modal-form__section\">\r\n                    <input className=\"modal-form__input modal-form__input--country\" id=\"country\" name=\"country\" type=\"text\" placeholder=\"Country\" defaultValue={country}></input>\r\n                    <label className=\"modal-form__label\" htmlFor=\"country\">Country</label>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal-form__submit\">\r\n                <button className=\"modal-form__submit-cancel\" type=\"button\" onClick={closeModal}>Cancel</button>\r\n                <button className=\"modal-form__submit-button\" id=\"submit\" type=\"submit\" form=\"modal-form\">Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LessonDetailsForm","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\trainer-context.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\store\\TrainerProvider.js",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\ClientNav\\ClientNav.jsx",[],"C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientLessons\\ClientLessons.jsx",["193"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './ClientLessons.scss'\r\n\r\nimport GridList from '../../components/GridList/GridList';\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport LessonResources from '../../components/LessonResources/LessonResources';\r\nimport PageLayout from  '../../components/PageLayout/PageLayout';\r\nimport ClientNav from '../../components/ClientNav/ClientNav';\r\n\r\nimport Map from '../../components/Map/Map';\r\n\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport {API_URL} from '../../App.js';\r\n\r\nconst ClientLessons  = () => {\r\n\r\n    const {setTrainerId, clients, programs} = useContext(TrainerContext);\r\n\r\n    const {trainerId, clientId} = useParams();\r\n\r\n    const [currentLesson, setCurrentLesson] = useState(null);\r\n    const [mapLocation, setMapLocation] = useState(null);\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        console.log('lessons updated')\r\n        if (!!clients){\r\n            const findClient = clients.find(client=>client.userId === clientId);\r\n            setCurrentClient(findClient);\r\n            setCurrentLesson(findClient.lessons.find(lesson=>lesson.current))\r\n        }\r\n        setTrainerId(trainerId);\r\n        \r\n        if(currentLesson){\r\n            geoCode();\r\n\r\n            //gets an array of all the resource ids that have been applied to all lessons\r\n            let allApplied = [];\r\n            const lessons = currentClient.lessons;\r\n            lessons.map(lesson=> lesson.resources.map(resource => allApplied.push(resource)));\r\n            \r\n            // adds a key name applied to each resource for all trainer programs\r\n            // const programs = [...this.state.availablePrograms];\r\n            programs.map(program => program.resources.map(resource => Object.assign(resource,{applied:false})))\r\n        \r\n            //adds the resource information for each lesson resource and adds a value of true for applied to the programs\r\n            programs.forEach(program=>\r\n                program.resources.forEach(programResource=>\r\n                    currentClient.lessons.forEach(lesson => \r\n                        lesson.resources.forEach((resource, i)=> {\r\n                            if(resource.id === programResource.id){\r\n                                //sets a value of true for applied resources\r\n                                programResource.applied=true;\r\n                                //remove the single id\r\n                                lesson.resources.splice(i,1);\r\n                                //replace the resource with the object\r\n                                lesson.resources.push(programResource);\r\n                            }  \r\n                        })\r\n                    )          \r\n                )\r\n            )\r\n        }\r\n    }, [currentClient, currentLesson, clients])\r\n\r\n    //old component did update for maps\r\n    //         if(prevProps.currentLesson){\r\n    //             if(prevProps.currentLesson.location.address !==this.state.currentLesson.location.address || prevProps.currentLesson.location.city !==this.state.currentLesson.location.city ){\r\n    //                 this.geoCode();\r\n    //             }\r\n    //         }\r\n\r\n    const geoCode = () =>{\r\n        const {address, city, province} = currentLesson.location;\r\n        axios.get(`http://www.mapquestapi.com/geocoding/v1/address?key=${process.env.REACT_APP_MAPQUEST_API}&street=${address}&city=${city}&state=${province}`)\r\n        .then(res=>{\r\n            // console.log(res.data.results[0].locations[0].displayLatLng);\r\n            // this.setState({mapLocation:res.data.results[0].locations[0].displayLatLng}); \r\n            setMapLocation(res.data.results[0].locations[0].displayLatLng)    \r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n     //adds an item to either the homework or the notes lists when the form is submitted\r\n    const addListItem = (note, list) =>{\r\n\r\n        const newItem={\r\n            note:note\r\n        }\r\n    \r\n        if (list===\"addNote\"){\r\n            //if the target is the notes section then save it to the appropriate spot in the db\r\n\r\n            axios.post(`${API_URL}/client/${clientId}/${currentLesson.id}/addNote`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = {...currentLesson};\r\n                lessonCopy.notes = res.data;\r\n\r\n                const clientCopy = {...currentClient};\r\n                const lessonloc = clientCopy.lessons.findIndex(lesson => lesson.id === currentLesson.id);\r\n                clientCopy.lessons.splice(lessonloc,1,lessonCopy);\r\n\r\n                setCurrentClient(clientCopy);\r\n                setCurrentLesson(lessonCopy);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }else{\r\n            //if the target is the homework section then save it to the appropriate spot in the db\r\n            axios.post(`${API_URL}/client/${clientId}/${currentLesson.id}/addHomework`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = {...currentLesson};\r\n                lessonCopy.homework = res.data;\r\n\r\n                const clientCopy = {...currentClient};\r\n                const lessonloc = clientCopy.lessons.findIndex(lesson => lesson.id === currentLesson.id);\r\n                clientCopy.lessons.splice(lessonloc,1,lessonCopy);\r\n\r\n                setCurrentLesson(lessonCopy);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n  \r\n    //changes the lesson being rendered when a lesson is clicked from top list\r\n    const updateCurrentLesson = lessonId =>{\r\n        const currentLesson = currentClient.lessons.find(lesson => lesson.id === lessonId);\r\n        setCurrentLesson(currentLesson);\r\n    }\r\n\r\n    //adds a new empty lesson when +New is clicked and saves it to the db\r\n    const addNewLesson = event =>{\r\n        event.preventDefault();\r\n        const {lessonName,date,time, locationName,address,city, province, country} = event.target\r\n\r\n        const newLesson = {\r\n            name:lessonName.value,\r\n            date:date.value,\r\n            time:time.value,\r\n            location:{\r\n                name:locationName.value,\r\n                address:address.value,\r\n                city:city.value,\r\n                province:province.value,\r\n                country:country.value\r\n            }\r\n        }\r\n\r\n        axios.post(`${API_URL}/client/${clientId}/addLesson`,newLesson)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            clientCopy.lessons.push(res.data)\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const deleteLesson = lessonId =>{\r\n       \r\n        axios.delete(`${API_URL}/client/${clientId}/${lessonId}/deleteLesson`)\r\n            .then(res =>{\r\n                const clientCopy = {...currentClient};\r\n                const lessonLoc = clientCopy.lessons.findIndex(lesson => lesson.id === lessonId);\r\n                clientCopy.lessons.splice(lessonLoc, 1);\r\n                setCurrentClient(clientCopy);\r\n                setCurrentLesson(currentClient.lessons[0]);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    const updateDetails = event =>{\r\n\r\n        event.preventDefault();\r\n\r\n        const {lessonName, date, time, locationName, address, city, province, country} = event.target;\r\n        \r\n        const updatedLesson = {\r\n            current:currentLesson.current,\r\n            name:lessonName.value,\r\n            date:date.value,\r\n            time:time.value,\r\n            location:{\r\n                name:locationName.value,\r\n                address:address.value,\r\n                city:city.value,\r\n                province:province.value,\r\n                country:country.value\r\n            }\r\n        }\r\n\r\n        axios.put(`${API_URL}/client/${currentClient.userId}/${currentLesson.id}/updateLessonDetails`, updatedLesson)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            const index = clientCopy.lessons.findIndex(lesson=>lesson.id === currentLesson.id);\r\n            clientCopy.lessons.splice(index,1);\r\n            clientCopy.lessons.splice(index, 0, res.data);\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(res.data);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const updateStatus = event =>{\r\n\r\n        const {id} = event.target;\r\n        axios.put(`${API_URL}/client/${clientId}/${id}/updateStatus`)\r\n        .then(res =>{\r\n            const clientCopy = {...currentClient};\r\n            const lessonCopy = {...currentLesson};\r\n            clientCopy.lessons.forEach(lesson => lesson.current = (lesson.id === id) ? true : false);\r\n            lessonCopy.current = true;\r\n            setCurrentClient(clientCopy);\r\n            setCurrentLesson(lessonCopy);\r\n\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {clients && <PageLayout> \r\n\r\n                <ClientNav />\r\n\r\n                <div className=\"lessons\">\r\n                    {/* list of all client's lessons - click to render a specific lesson */}\r\n                    <div className=\"lessons__list\">\r\n\r\n                        {currentClient &&\r\n                            currentClient.lessons.map(lesson=> \r\n                            <GridList \r\n                                key={lesson.id} \r\n                                content={{name:lesson.name, date: lesson.date, time:lesson.time, current:lesson.current}}\r\n                                id={lesson.id} \r\n                                modalName={!lesson.current ? \"delete\" : \"noDelete\"}\r\n                                deleteBtn={true}\r\n                                deleteType=\"modal\" \r\n                                deleteString = {!lesson.current ? lesson.name : \"Cannot Delete Next Lesson\"}\r\n                                deleteFunction={deleteLesson}\r\n                                onClick={updateCurrentLesson}\r\n                                updateStatus={updateStatus}\r\n                                slider={true}\r\n                            />)\r\n                        }\r\n\r\n                        <div className=\"lessons__list-new\">\r\n                            <ModalContainer \r\n                                modalType = \"update\" \r\n                                modalName = \"addLesson\" \r\n                                buttonType=\"image\"\r\n                                url=\"/icons/plus-square.svg\"\r\n                                onSubmit={addNewLesson} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* displays the chosen lesson set in state */}\r\n                \r\n                    {currentLesson && \r\n                        <div className=\"component current-lesson\">\r\n                        <h2 className=\"component-title\">{currentLesson.name}</h2>\r\n                            <div className = \"current-lesson__top\">\r\n                                {/* shows the details for the lesson */}\r\n                                <div className=\"current-lesson__top-details\">\r\n                                    <div className=\"current-lesson__top-details-text\">\r\n                                        <div className=\"current-lesson__top-details-where\">\r\n                                            <p className=\"current-lesson__top-details-title\">Where</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{currentLesson.location.name}</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`${currentLesson.location.address}, ${currentLesson.location.city}`}</p>\r\n                                        </div>\r\n                                        <div className=\"current-lesson__top-details-when\">\r\n                                            <p className=\"current-lesson__top-details-title\">When</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`Date: ${currentLesson.date}`}</p>\r\n                                            <p className=\"current-lesson__top-details-item\">{`Time: ${currentLesson.time}`}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* modal to update the lesson details */}\r\n                                    <div className=\"current-lesson__top-details-edit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"update\" \r\n                                            modalName = \"modifyLesson\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/edit-icon.svg\"\r\n                                            onSubmit={updateDetails} \r\n                                            information={currentLesson}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className = \"client__contact-map\">\r\n                                    <Map\r\n                                        mapLocation={mapLocation}\r\n                                        containerSize={{width:\"346px\", height:\"268px\"}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"lesson-divider\"></div>\r\n\r\n                            <h2 className=\"section-title section-title-resources\">Resources</h2>\r\n                            \r\n                            {/* renders the resource section for the lessons */}\r\n                            <LessonResources programs={programs} currentLesson={currentLesson} currentClient={currentClient}/>\r\n                    \r\n                            {/* renders the notes and the homework section */}\r\n                            <div className=\"current-lesson__bottom\">\r\n                                <div className = \"client__notes\" style={{backgroundImage: \"url('/images/notePaper.png')\"}}>\r\n                                    <div className=\"client__notes-submit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"note\" \r\n                                            modalName = \"addNote\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/add-note.svg\" \r\n                                            information = {currentLesson.notes}\r\n                                            onSubmit={addListItem} \r\n                                        />\r\n                                    </div>\r\n                                    <div className = \"client__notes-body\">\r\n                                        <p className=\"client__notes-title\">Lesson Notes ...</p>\r\n                                        <div className=\"client__notes-text\"> {currentLesson.notes}</div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className = \"client__notes\" style={{backgroundImage: \"url('/images/notePaper.png')\"}}>\r\n                                    <div className=\"client__notes-submit\">\r\n                                        <ModalContainer \r\n                                            modalType = \"note\" \r\n                                            modalName = \"addHomework\" \r\n                                            buttonType=\"image\"\r\n                                            url=\"/icons/add-note.svg\" \r\n                                            information = {currentLesson.homework}\r\n                                            onSubmit={addListItem} \r\n                                        />\r\n                                    </div>\r\n                                    <div className = \"client__notes-body\">\r\n                                        <p className=\"client__notes-title\">Homework ...</p>\r\n                                        <div className=\"client__notes-text\"> {currentLesson.homework}</div>\r\n                                    </div>    \r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </PageLayout> \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClientLessons\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ClientProfile\\ClientProfile.jsx",["194"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './ClientProfile.scss';\r\n\r\nimport Map from '../../components/Map/Map';\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport ClientNav from '../../components/ClientNav/ClientNav';\r\nimport PageLayout from '../../components/PageLayout/PageLayout';\r\n\r\nimport {API_URL} from '../../App.js';\r\n\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nconst ClientProfile = () => {\r\n\r\n    const {clients, setClients, programs, setTrainerId} = useContext(TrainerContext);\r\n    \r\n    const {clientId, trainerId} = useParams();\r\n\r\n    const [mapLocation, setMapLocation] = useState();\r\n\r\n    const [currentClient, setCurrentClient] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        console.log('client profile loaded');\r\n        !!clients && setCurrentClient(clients.find(client => client.userId === clientId));\r\n        setTrainerId(trainerId);\r\n        \r\n        if(programs){\r\n            programs.forEach(program => {\r\n                const inputBox = document.getElementById(program.id);\r\n                if(!!inputBox){inputBox.checked = false};\r\n            })\r\n\r\n            if (currentClient){\r\n                currentClient.programs.forEach(program=>{\r\n                    const inputBox = document.getElementById(program.id);\r\n                    if(!!inputBox){inputBox.checked = true};\r\n                });\r\n            }\r\n        }\r\n        \r\n        //if the userId currently in state doesn't match the userId in the path then update the currentClient in state to match the one in the path\r\n        if (currentClient){\r\n            if(currentClient.userId !== clientId){\r\n                geoCode();\r\n            }  \r\n        }\r\n    }, [programs, clients, clientId, currentClient, setCurrentClient])\r\n\r\n    const geoCode = () =>{\r\n        const {address, city, province} = currentClient.userProfile;\r\n        axios.get(`http://www.mapquestapi.com/geocoding/v1/address?key=${process.env.REACT_APP_MAPQUEST_API}&street=${address}&city=${city}&state=${province}`)\r\n        .then(res=>{\r\n            setMapLocation(res.data.results[0].locations[0].displayLatLng);     \r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const addNote=(note)=>{\r\n        const newNote={\r\n            note:note\r\n        }\r\n\r\n        axios.post(`${API_URL}/client/${currentClient.userId}/addNote`, newNote)\r\n        .then(res =>{\r\n            const clientLoc = clients.findIndex(client => client.userId === clientId);\r\n            const clientCopy=[...clients];\r\n            clientCopy.splice(clientLoc, 1 ,res.data);\r\n            setClients(clientCopy);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    const toggleProgram=(programId)=>{\r\n\r\n        const currentPrograms = currentClient.programs;\r\n        const program = currentPrograms.find((program)=>program.id === programId);\r\n        const index = currentPrograms.findIndex((program)=>program.id === programId);\r\n\r\n        if(program){\r\n            document.getElementById(programId).checked=false;\r\n            currentPrograms.splice(index,1);\r\n            \r\n        }else{\r\n            currentPrograms.push(programs.find(program=> programId===program.id))\r\n        }\r\n        \r\n        axios.put(`${API_URL}/client/${currentClient.userId}/updatePrograms`, currentPrograms)\r\n        .catch(err=>{\r\n            console.log(err);\r\n        }) \r\n    }\r\n\r\n    /** ================================================ UPDATE CLIENT ================================================*/\r\n    const updateClient=(event)=>{\r\n        event.preventDefault();\r\n\r\n        const {fname, lname, email, phone, address, city, province, country, postal} = event.target;\r\n        \r\n        //create a new client object using the input information from the form\r\n        const updatedClient = {\r\n            fname:fname.value,\r\n            lname:lname.value,\r\n            email:email.value,\r\n            phone:phone.value,\r\n            address:address.value,\r\n            city: city.value,\r\n            province: province.value,\r\n            country: country.value,\r\n            postal:postal.value\r\n        }\r\n\r\n        // send the new client information to the db and update the state to pull from the db\r\n        axios.put(`${API_URL}/client/${clientId}/updateDetails`, updatedClient)\r\n        .then(res =>{\r\n            console.log(res);\r\n            const clientLoc = clients.findIndex(client => client.userId === clientId);\r\n            const clientCopy=[...clients];\r\n            clientCopy.splice(clientLoc,1,res.data);\r\n            clientCopy.sort((a,b)=>{\r\n                if(a.userProfile.lname < b.userProfile.lname) return -1;\r\n                if(a.userProfile.lname > b.userProfile.lname) return 1;\r\n                return 0;\r\n            })\r\n            setClients(clientCopy);\r\n           })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n    \r\n    const {address, city, province, country, postal, email, phone} = currentClient ? currentClient.userProfile : {};\r\n\r\n    return (\r\n        <>\r\n        {clients && <PageLayout> \r\n            <ClientNav/>\r\n            <div className=\"client__profile-container\">\r\n                    <div className=\"client__programs\">\r\n                        <p className=\"client__programs-title\">Programs</p>\r\n                        <div className=\"client__programs-list\">\r\n                            {!!programs && programs.map(program => \r\n                                <label className=\"client__programs-label\" key={program.id} >{program.name} \r\n                                    <input onClick={()=>{toggleProgram(program.id)}} type=\"checkbox\" name={program.id} id={program.id} value={program.name}/> \r\n                                    <span className=\"client__programs-check\"></span>\r\n                                </label>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    {currentClient &&\r\n                    <div className = \"client__profile\">\r\n                        <div className = \"component client__contact\">\r\n                            <div className=\"client__contact-info\">\r\n                                <div className=\"client__contact-info-top\">\r\n                                <p className=\"component-title client__contact-title\">Contact</p>\r\n                                    <div className=\"client__contact-address\"> \r\n                                        <img className=\"contact-icon\"src=\"/icons/map-marker.svg\" alt=\"address\"/>\r\n                                        <div>\r\n                                            <p className=\"client__contact-item\"> {address}</p>\r\n                                            <p className=\"client__contact-item\">  {`${city}, ${province}, ${country}`}</p>\r\n                                            <p className=\"client__contact-item\"> {postal}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"client__contact-contact\">\r\n                                        <p className=\"client__contact-item client__contact-item--email\"><img className=\"contact-icon\" src=\"/icons/email-icon.svg\" alt=\"email\"/> <a href={`mailto:${email}`}> {email}</a></p>\r\n                                        <p className=\"client__contact-item\"><img className=\"contact-icon\" src=\"/icons/phone-icon.svg\" alt=\"phone\"/> {phone}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"client__contact-modify\">\r\n                                    <ModalContainer \r\n                                        modalType = \"update\" \r\n                                        modalName = \"updateClient\" \r\n                                        buttonType=\"image\"\r\n                                        url=\"/icons/user-edit.svg\"\r\n                                        onSubmit={updateClient} \r\n                                        information={currentClient}\r\n                                        />\r\n                                </div>\r\n                            </div>\r\n                            <div className = \"client__contact-map\">\r\n                                <Map\r\n                                    mapLocation={mapLocation}\r\n                                    containerSize={{width:\"386px\", height:\"200px\"}}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                            <div className = \"client__notes\" style={{backgroundImage: \"url('/images/notePaper.png')\"}}>\r\n                                <div className=\"client__notes-submit\">\r\n                                    <ModalContainer \r\n                                        modalType = \"note\" \r\n                                        modalName = \"addNote\" \r\n                                        url=\"/icons/add-note.svg\" \r\n                                        buttonType=\"image\"\r\n                                        information = {currentClient.notes}\r\n                                        onSubmit={addNote} \r\n                                    />\r\n                                </div>\r\n\r\n                                <div className = \"client__notes-body\">\r\n                                    <p className=\"client__notes-title\">Notes to Self ...</p>\r\n                                    <div className=\"client__notes-text\"> {currentClient.notes}</div>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n\r\n        </PageLayout> \r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ClientProfile\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\Pages\\ProgramDetails\\ProgramDetails.jsx",["195"],"import React, {useState, useEffect, useContext, useRef} from 'react'\r\nimport {useParams, useHistory} from 'react-router-dom';\r\nimport firebase from '../../firebase';\r\nimport axios from 'axios';\r\n\r\nimport \"../Programs/Programs.scss\";\r\n\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\nimport ClientList from '../../components/ClientList/ClientList';\r\nimport GridList from '../../components/GridList/GridList';\r\nimport TrainerContext from '../../store/trainer-context';\r\n\r\nimport {API_URL} from '../../App';\r\n\r\n\r\nfunction ProgramDetails() {\r\n\r\n    const {setTrainerId, programs, setPrograms} = useContext(TrainerContext);\r\n\r\n    const {programId, trainerId} = useParams();\r\n    const history = useHistory();\r\n\r\n    const fileInput = useRef(null);\r\n\r\n    //all state for uploading files\r\n    const [selectedFile, setSelectedFile] = useState(null);\r\n    const [showRadio, setShowRadio] = useState(true);\r\n    const [uploadFileType, setUploadFileType] = useState(\"\");\r\n    const [showLoading, setShowLoading] = useState(false);\r\n    const [hideEmpty, setHideEmpty] = useState(null);\r\n    \r\n    const [currentProgram, setCurrentProgram] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        !!programs && setCurrentProgram(programs.find(program=>program.id===programId));\r\n        setTrainerId(trainerId);\r\n    },[programId, programs, trainerId, setPrograms, setTrainerId])\r\n\r\n    // triggered by clicking on a download type radio button\r\n    const uploadType = (event) => {\r\n        const type = event.target.value;\r\n        // if the type value of the radio button is of type file the activate the file input box\r\n        if (type ===\"file\"){\r\n                fileInput.current.click()\r\n        }else{\r\n            //otherwise update the state with an input type of url and hide the radio buttons\r\n            setUploadFileType(type);\r\n            setShowRadio(false);\r\n        }\r\n    }\r\n\r\n    // fired through reference in uploadType - event to handle choosing a file type from file picker\r\n    const fileSelectedHandler = event =>{\r\n        //files is an array - if they choose more than one - set the upload type in state to file and hide the radio buttons\r\n        setSelectedFile(event.target.files[0]);\r\n        setUploadFileType(\"file\");\r\n        setShowRadio(false);\r\n\r\n    }\r\n\r\n    // fired by clicking the upload button\r\n    const fileUpload = (event, uploadType)=>{\r\n        event.preventDefault();\r\n\r\n        // if the resource to be added is a file the save it to firebase and send the resulting url to db\r\n        if (uploadType === \"file\"){\r\n            const selectedIndex = event.target.uploadType.options.selectedIndex\r\n            const selectedType = event.target.uploadType.options[selectedIndex].value;\r\n            \r\n            let bucketName = programs[0].trainerId;\r\n            let file = selectedFile;\r\n            let storageRef = firebase.storage().ref(`/${bucketName}/${file.name}`);\r\n            let uploadTask = storageRef.put(file);\r\n            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n                //next\r\n                ()=>{\r\n                    console.log(\"Uploading ...\")\r\n                    //show the loading icon while resource is uploading\r\n                    setShowLoading(true);\r\n                    setHideEmpty(true);\r\n                },\r\n                //error\r\n                ()=>{\r\n                    console.log(\"Upload Unsuccessful\");\r\n                },\r\n                //complete\r\n                ()=>{\r\n                    let storageLoc = firebase.storage().ref();\r\n                    storageLoc.child(`/${bucketName}/${file.name}`).getDownloadURL()\r\n                    .then((url)=>{\r\n                        //create a new resource based using the url retrieved from storage - id is created on backend\r\n                        const newResource={\r\n                            name:event.target.uploadName.value,\r\n                            url:url,\r\n                            type: selectedType\r\n                        }\r\n                        //save the new resource to the database using the function passed down by the trainer component\r\n                        addResource(newResource, programId);\r\n                        //stop showing the loading icon\r\n                        setShowLoading(false);\r\n                    })\r\n                    .catch(err=>{\r\n                        console.log(err);\r\n                    })\r\n                }   \r\n            )\r\n\r\n        //if the resource is a url then capture the url and send it to db\r\n        }else{\r\n            const newResource={\r\n                name:event.target.uploadName.value,\r\n                url:event.target.uploadURL.value,\r\n                type:\"url\"\r\n            }\r\n            addResource(newResource, programId);\r\n        }\r\n\r\n        // return the radio buttons to the screen and hide the resource input elements\r\n        setUploadFileType(\"\");\r\n        setShowRadio(true);\r\n        setShowLoading(false);\r\n    }\r\n\r\n    /** ================================================ ADD PROGRAM ================================================*/\r\n    const addProgram=(event)=>{\r\n\r\n        event.preventDefault();\r\n\r\n       //create a new program based on the information entered into the modal form - id is created on backend\r\n       const newProgram = {\r\n           name:event.target.programName.value,\r\n           description:event.target.programDescription.value\r\n       }\r\n\r\n       axios.post(`${API_URL}/trainer/${trainerId}/addProgram`, newProgram)\r\n       .then(res =>{\r\n           setPrograms([...programs, res.data]);\r\n           return res;\r\n       })\r\n       .then(res2=>{\r\n           history.push(`/trainer/${trainerId}/programs/${res2.data.id}`)\r\n       })\r\n       .catch(err=>{\r\n           console.log(err);\r\n       })   \r\n   }\r\n\r\n   /** ================================================ UPDATE PROGRAM ================================================*/\r\n   const updateProgram=(event)=>{\r\n\r\n       event.preventDefault();\r\n       \r\n       //create a new program based on the information entered into the modal form\r\n       const newProgram = {\r\n           name:event.target.programName.value,\r\n           description:event.target.programDescription.value\r\n       }\r\n\r\n       //send a request to the db to save the new information - trigger an update of the component to fetch the new data       \r\n       axios.post(`${API_URL}/trainer/${trainerId}/${programId}/updateProgram`, newProgram)\r\n       .then(res =>{\r\n            console.log(res);\r\n            const programsCopy = [...programs];\r\n            const programLoc = programsCopy.findIndex(program => program.id === res.data.id);\r\n            programsCopy.splice(programLoc,1, res.data);\r\n            setPrograms(programsCopy);\r\n       })\r\n       .catch(err=>{\r\n           console.log(err);\r\n       })\r\n       \r\n   }\r\n\r\n   /** ================================================ DELETE PROGRAM ================================================*/\r\n   const deleteProgram = (programId) =>{\r\n\r\n       axios.delete(`${API_URL}/program/${programId}`)\r\n       .then((res) =>{\r\n           //trigger the state to update the component and the redirect the user to the first program on the list\r\n           const programsCopy = [...programs];\r\n           const programLoc = programsCopy.findIndex(program => program.id === programId);\r\n           programsCopy.splice(programLoc,1);\r\n           setPrograms(programsCopy);\r\n       })\r\n       .then(() =>{\r\n           //if the program removed is the only program then send the user to the empty page\r\n           if((programs.length - 1) === 0){\r\n               history.push(`/trainer/${trainerId}/programs`)\r\n           }else{\r\n               //if the program on the list was the first on on the list send it to the program at index 1 otherwise index 0\r\n               const programLoc = programs.findIndex(program => program.id === programId);\r\n               programLoc !== 0 ? \r\n               history.push(`/trainer/${trainerId}/programs/${programs[0].id}`)\r\n               :\r\n               history.push(`/trainer/${trainerId}/programs/${programs[1].id}`)\r\n           }\r\n       })\r\n       .catch(err=>{\r\n           console.log(err);\r\n       }); \r\n   }\r\n\r\n   /** ================================================ ADD RESOURCE ================================================*/\r\n   const addResource=(newResource)=>{\r\n       //a new resources is made in the programs component and passed back to trainer to save in the db\r\n       axios.post(`${API_URL}/program/${programId}/addResource`, newResource)\r\n       .then(res =>{\r\n            const programCopy = {...currentProgram};\r\n            programCopy.resources = [...programCopy.resources, res.data.resources.pop()];\r\n            setCurrentProgram(programCopy);\r\n       })\r\n       .catch(err=>{\r\n           console.log(err);\r\n       })\r\n   }\r\n\r\n   /** ================================================ DELETE RESOURCE ================================================*/\r\n   const deleteResource = (resourceId) =>{\r\n       //a resourceId is sent back from the programs component and removed from the db\r\n       axios.delete(`${API_URL}/program/${programId}/${resourceId}`)\r\n       .then(res =>{\r\n        //    setUpdated(true);//trigger the component did update to pull updated data from db\r\n            const programCopy = {...currentProgram};\r\n            const resourceLoc = programCopy.resources.findIndex(resource=>resource.id === resourceId);\r\n            programCopy.resources.splice(resourceLoc, 1);\r\n            setCurrentProgram(programCopy);\r\n       })\r\n       .catch(err=>{\r\n           console.log(err);\r\n       }) \r\n    }\r\n\r\n    return (\r\n        <div className=\"programs__container\" style={{backgroundImage: \"url('/images/main2.jfif')\"}} >\r\n            {/* render a list of clients on the page */}\r\n            {programs && <ClientList />}\r\n            \r\n            {currentProgram && \r\n                <div className=\"programs__container-right\">\r\n                    <div className=\"component program__resources\">\r\n                        <div className=\"program__header\">\r\n                            <p className=\"component-title\">{currentProgram.name}</p>\r\n                            <p className=\"program__header-description\">{currentProgram.description}</p>\r\n                        </div>\r\n\r\n                        {/* update program details */}\r\n                        <div className=\"program__header-actions\">\r\n                            <div className=\"program__header-update\">\r\n                                <ModalContainer \r\n                                    modalType = \"update\" \r\n                                    modalName = \"updateProgram\" \r\n                                    buttonType=\"image\"\r\n                                    url=\"/icons/edit-icon.svg\"\r\n                                    onSubmit={updateProgram}\r\n                                    information={currentProgram}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* delete program */}\r\n                            <div className=\"program__header-delete\">\r\n                                <ModalContainer \r\n                                    modalType = \"delete\" \r\n                                    modalName = \"deleteProgram\" \r\n                                    buttonType=\"image\"\r\n                                    url=\"/icons/trash.svg\"\r\n                                    onSubmit={deleteProgram}\r\n                                    deleteString= {currentProgram.name}\r\n                                    deleteId={currentProgram.id}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>  \r\n\r\n                    {/* if there are no programs added yet then show then empty container with instructions for the user */}\r\n                    {(currentProgram.resources.length === 0 && !hideEmpty) ? \r\n                        <div onClick={()=>setShowRadio(true)} className=\"empty-container empty-resources\">\r\n                            <p>Choose a Resource Type Below to Add Resources</p>\r\n                            {showLoading && \r\n                                <div className=\"gridlist\">\r\n                                    <div className=\"component grid__list-item loading\"><img src=\"/icons/loading-icon.gif\" alt=\"loading\"/></div>\r\n                                </div>}    \r\n                        </div>\r\n                        :  \r\n                        <div className=\"gridlist\">\r\n                            {/* otherwise render a list of resources available for the program */}\r\n                            {currentProgram.resources.map(resource=> \r\n                                <GridList \r\n                                    key={resource.id} \r\n                                    content={resource.name}\r\n                                    resourceType={resource.type} \r\n                                    id={resource.id} \r\n                                    link={resource.url} \r\n                                    description={resource.type} \r\n                                    deleteString={resource.name}\r\n                                    deleteBtn={true}\r\n                                    deleteType=\"modal\" \r\n                                    deleteFunction={deleteResource}\r\n                                    modalName=\"deleteResource\"\r\n                                />\r\n                            )}\r\n                            {/* if the resource is loading show the loading icon */}\r\n                            {showLoading && <div className=\"component grid__list-item loading\"><img src=\"/icons/loading-icon.gif\" alt=\"loading\"/></div>}\r\n                        </div>\r\n                        }\r\n\r\n                <div className=\"resource__add\">\r\n    \r\n                    {/* input box used to access the file picker */}\r\n                    <input \r\n                        style={{display:'none'}} \r\n                        type=\"file\"\r\n                        // when file is selected it sets the state to the file, hides the radio and sets type of file in state\r\n                        onChange={fileSelectedHandler} \r\n                        //input box is invisible activated by radio button choice through reference in upload type function \r\n                        ref={fileInput}>\r\n                    </input>\r\n\r\n                    {/* conditionally render the radio buttons based on the state value */}\r\n                    {showRadio && \r\n                        <div className=\"resource__add-radios\">\r\n                            {/* clicking an input box sets which resource type options to show */}\r\n                            <input className=\"resource__add-radios-button\" type=\"radio\" id=\"url\" name=\"addResource\" value=\"url\" onClick={uploadType}/>\r\n                            <label className=\"resource__add-radios-label\" htmlFor=\"url\">Add Website</label>\r\n                            <input className=\"resource__add-radios-button\" type=\"radio\" id=\"file\" name=\"addResource\" value=\"file\" onClick={uploadType}/>\r\n                            <label className=\"resource__add-radios-label\" htmlFor=\"file\">Upload File</label>\r\n                        </div>\r\n                    }\r\n                    \r\n                    {/* renders the appropriate text boxes and select element if the upload type is a file */}\r\n                    {(uploadFileType===\"file\" && !showRadio) &&\r\n                        <form className=\"resource__upload\" onSubmit={(event)=>fileUpload(event, uploadFileType)}>\r\n                            <input className=\"text-input resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                            <input className=\"text-input resource__upload-file\" name=\"uploadURL\" type=\"text\" value={selectedFile.name} readOnly></input>\r\n                            <select className=\"resource__upload-type\" name=\"uploadType\">\r\n                                <option value=\"pdf\">pdf</option>\r\n                                <option value=\"doc\">doc</option>\r\n                                <option value=\"video\">video</option>\r\n                                <option value=\"image\">image</option>\r\n                            </select>\r\n                            <button  className=\"resource__upload-back\" onClick={()=>{setShowRadio(true)}}><img src=\"/icons/arrow_back-24px.svg\" alt=\"back\"/></button> \r\n                            <button className=\"resource__upload-submit\" type=\"submit\">Add</button>  \r\n                        </form>\r\n                    }\r\n\r\n                    {/* renders the appropriate text boxes and select element if the upload type is a url */}\r\n                    {(uploadFileType===\"url\" && !showRadio) &&\r\n                        <form className=\"resource__upload\" onSubmit={(event)=>fileUpload(event, uploadFileType)}>\r\n                            <input className=\"text-input resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                            <input className=\"text-input resource__upload-file\" name=\"uploadURL\" type=\"text\" placeholder=\"Enter URL\" required></input>\r\n                            <button  className=\"resource__upload-back\" onClick={()=>{setShowRadio(true)}}><img src=\"/icons/arrow_back-24px.svg\" alt=\"back\"/></button> \r\n                            <button className=\"resource__upload-submit\" type=\"submit\">Add</button>    \r\n                        </form>\r\n                    }\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProgramDetails\r\n","C:\\Users\\patti\\Desktop\\WebDev\\plan2train\\client\\src\\components\\PageLayout\\PageLayout.jsx",[],{"ruleId":"196","replacedBy":"197"},{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","severity":1,"message":"201","line":25,"column":7,"nodeType":"202","endLine":25,"endColumn":9,"suggestions":"203"},{"ruleId":"200","severity":1,"message":"204","line":41,"column":11,"nodeType":"205","endLine":75,"endColumn":6},{"ruleId":"200","severity":1,"message":"206","line":47,"column":7,"nodeType":"202","endLine":47,"endColumn":17,"suggestions":"207"},{"ruleId":"200","severity":1,"message":"208","line":40,"column":7,"nodeType":"202","endLine":40,"endColumn":9,"suggestions":"209"},{"ruleId":"210","severity":1,"message":"211","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":17},{"ruleId":"214","severity":1,"message":"215","line":82,"column":5,"nodeType":"216","endLine":82,"endColumn":68},{"ruleId":"196","replacedBy":"217"},{"ruleId":"198","replacedBy":"218"},{"ruleId":"210","severity":1,"message":"219","line":9,"column":12,"nodeType":"212","messageId":"213","endLine":9,"endColumn":15},{"ruleId":"210","severity":1,"message":"220","line":120,"column":12,"nodeType":"212","messageId":"213","endLine":120,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":7,"column":13,"nodeType":"212","messageId":"223","endLine":7,"endColumn":24},{"ruleId":"221","severity":1,"message":"224","line":8,"column":13,"nodeType":"212","messageId":"223","endLine":8,"endColumn":19},{"ruleId":"221","severity":1,"message":"225","line":10,"column":22,"nodeType":"212","messageId":"223","endLine":10,"endColumn":30},{"ruleId":"200","severity":1,"message":"226","line":68,"column":8,"nodeType":"202","endLine":68,"endColumn":47,"suggestions":"227"},{"ruleId":"200","severity":1,"message":"228","line":51,"column":8,"nodeType":"202","endLine":51,"endColumn":70,"suggestions":"229"},{"ruleId":"210","severity":1,"message":"230","line":125,"column":11,"nodeType":"212","messageId":"213","endLine":125,"endColumn":21},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTrainerId' and 'trainerId'. Either include them or remove the dependency array.","ArrayExpression",["233"],"The 'fileUpload' function makes the dependencies of useEffect Hook (at line 80) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'fileUpload' in its own useCallback() Hook.","VariableDeclarator","React Hook useEffect has missing dependencies: 'address', 'city', and 'province'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has missing dependencies: 'address', 'city', 'clientId', and 'province'. Either include them or remove the dependency array.",["235"],"no-unused-vars","'EmptyPage' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["231"],["232"],"'map' is assigned a value but never used.","'isOver' is assigned a value but never used.","no-redeclare","'information' is already defined.","redeclared","'lesson' is already defined.","'location' is already defined.","React Hook useEffect has missing dependencies: 'clientId', 'geoCode', 'programs', 'setTrainerId', and 'trainerId'. Either include them or remove the dependency array.",["236"],"React Hook useEffect has missing dependencies: 'geoCode', 'setTrainerId', and 'trainerId'. Either include them or remove the dependency array.",["237"],"'addProgram' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},{"desc":"240","fix":"242"},{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},"Update the dependencies array to be: [setTrainerId, trainerId]",{"range":"247","text":"248"},"Update the dependencies array to be: [address, city, clientId, province]",{"range":"249","text":"250"},{"range":"251","text":"250"},"Update the dependencies array to be: [currentClient, currentLesson, clients, setTrainerId, trainerId, clientId, geoCode, programs]",{"range":"252","text":"253"},"Update the dependencies array to be: [programs, clients, clientId, currentClient, setCurrentClient, setTrainerId, trainerId, geoCode]",{"range":"254","text":"255"},[720,722],"[setTrainerId, trainerId]",[1496,1506],"[address, city, clientId, province]",[1346,1348],[2952,2991],"[currentClient, currentLesson, clients, setTrainerId, trainerId, clientId, geoCode, programs]",[1832,1894],"[programs, clients, clientId, currentClient, setCurrentClient, setTrainerId, trainerId, geoCode]"]