[{"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\index.js":"1","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\reportWebVitals.js":"2","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\App.js":"3","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx":"4","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx":"5","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx":"6","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx":"7","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\User\\User.jsx":"8","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx":"9","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx":"10","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramContent\\ProgramContent.jsx":"11","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientProfile\\ClientProfile.jsx":"12","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientLessons\\ClientLessons.jsx":"13","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx":"14","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\List\\List.jsx":"15","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx":"16","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramBar\\ProgramBar.jsx":"17","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx":"18","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Modal\\Modal.jsx":"19","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx":"20","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx":"21","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx":"22","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\firebase.js":"23","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx":"24","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx":"25","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx":"26","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx":"27","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx":"28"},{"size":479,"mtime":1609516748053,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1179,"mtime":1611520289879,"results":"32","hashOfConfig":"30"},{"size":7818,"mtime":1611517390805,"results":"33","hashOfConfig":"30"},{"size":819,"mtime":1611086917935,"results":"34","hashOfConfig":"30"},{"size":7592,"mtime":1611401734304,"results":"35","hashOfConfig":"30"},{"size":4644,"mtime":1611520289881,"results":"36","hashOfConfig":"30"},{"size":4137,"mtime":1611165352880,"results":"37","hashOfConfig":"30"},{"size":189,"mtime":1609556471311,"results":"38","hashOfConfig":"30"},{"size":3907,"mtime":1611181223999,"results":"39","hashOfConfig":"30"},{"size":872,"mtime":1611172017746,"results":"40","hashOfConfig":"30"},{"size":2138,"mtime":1611254521116,"results":"41","hashOfConfig":"30"},{"size":13203,"mtime":1611520289885,"results":"42","hashOfConfig":"30"},{"size":1459,"mtime":1611171263971,"results":"43","hashOfConfig":"30"},{"size":736,"mtime":1611520289896,"results":"44","hashOfConfig":"30"},{"size":7213,"mtime":1611323979710,"results":"45","hashOfConfig":"30"},{"size":961,"mtime":1609618837760,"results":"46","hashOfConfig":"30"},{"size":271,"mtime":1609852900686,"results":"47","hashOfConfig":"30"},{"size":2355,"mtime":1611455476098,"results":"48","hashOfConfig":"30"},{"size":3161,"mtime":1610303611507,"results":"49","hashOfConfig":"30"},{"size":2450,"mtime":1611167347958,"results":"50","hashOfConfig":"30"},{"size":1011,"mtime":1611172348051,"results":"51","hashOfConfig":"30"},{"size":464,"mtime":1611194250386,"results":"52","hashOfConfig":"30"},{"size":2098,"mtime":1611323711254,"results":"53","hashOfConfig":"30"},{"size":2287,"mtime":1611456327152,"results":"54","hashOfConfig":"30"},{"size":5629,"mtime":1611520289894,"results":"55","hashOfConfig":"30"},{"size":1436,"mtime":1611520289883,"results":"56","hashOfConfig":"30"},{"size":1258,"mtime":1611520289890,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"l44x0r",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\index.js",[],["124","125"],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\reportWebVitals.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\App.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx",["126"],"import React from 'react';\r\nimport \"./Programs.scss\";\r\nimport firebase from '../../firebase';\r\n\r\nimport ClientList from '../../components/ClientList/ClientList';\r\nimport List from '../../components/List/List';\r\n\r\n/**\r\n *  programs={this.state.programs} \r\n    currentProgramId={match.params.programId} \r\n    match={match}\r\n    addProgram={this.addProgram}\r\n    addResource={this.addResource} \r\n */\r\nclass Programs extends React.Component {\r\n\r\n    state={selectedFile:null, showRadio:false, addActivated:false, uploaded:false, uploadType:\"\"}\r\n\r\n    componentDidUpdate(){\r\n        // console.log(\"programs - did update\")\r\n    }\r\n\r\n    // fired by clicking on a radio button\r\n    uploadType = (event) => {\r\n        const type = event.target.value;\r\n        if (type ===\"file\"){\r\n                console.log( this.fileInput)\r\n                this.fileInput.click()\r\n        }else{\r\n            this.setState({uploadType:type, showRadio:false})\r\n        }\r\n    }\r\n\r\n    // fired through reference in uploadType - event to handle choosing a file type from file picker\r\n    fileSelectedHandler = event =>{\r\n        //files is an array - if they choose more than one\r\n        this.setState({selectedFile:event.target.files[0], uploadType:\"file\", showRadio:false});\r\n    }\r\n\r\n    // fired by clicking the upload button\r\n    fileUpload=(event,uploadType)=>{\r\n        event.preventDefault();\r\n\r\n        // if the resource to be added is a file the save it to firebase and send the resulting url to db\r\n        if (uploadType === \"file\"){\r\n            let bucketName = \"resources\";\r\n            let file = this.state.selectedFile;\r\n            let storageRef = firebase.storage().ref(`${bucketName}/${file.name}`);\r\n            let uploadTask = storageRef.put(file);\r\n            uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n                ()=>{\r\n                    let downloadURL = uploadTask.snapshot.getDownloadURL;\r\n                })\r\n            \r\n            let storageLoc = firebase.storage().ref();\r\n            storageLoc.child(`/${this.props.programs.trainerId}/${this.state.selectedFile.name}`).getDownloadURL()\r\n            .then((url)=>{\r\n                const newResource={\r\n                    name:event.target.uploadName.value,\r\n                    url:url,\r\n                    type:\"pdf\"\r\n                }\r\n                this.props.addResource(newResource, this.props.match.params.programId);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        //if the resource is a url then capture the url and send it to db\r\n        }else{\r\n            const newResource={\r\n                name:event.target.uploadName.value,\r\n                url:event.target.uploadURL.value,\r\n                type:\"url\"\r\n            }\r\n            this.props.addResource(newResource, this.props.match.params.programId);\r\n        }\r\n\r\n        // return the add button to the screen and hide the resource input elements\r\n        this.setState({addActivated:false, uploadType:\"\"});\r\n    }\r\n\r\n\r\n    render(){\r\n        const {programs, match, addProgram}=this.props;\r\n        const program = programs.find(program=>program.id===match.params.programId)\r\n        \r\n        return (\r\n            <div className=\"programs__container\">\r\n                <ClientList list={programs} match={match} onSubmitTrainer={addProgram}/>\r\n                <div className=\"program\">\r\n                    <div className=\"component program__resources\">\r\n                        <div className=\"program__header\">\r\n                            <p className=\"program__header-title\">{program.name}</p>\r\n                            <p className=\"program__header-description\">{program.description}</p>\r\n                        </div>\r\n\r\n                        <div className=\"list\">\r\n                                {program.resources.map(resource=> <List key={resource.id} content={resource.name} id={resource.id} link={resource.url} description={resource.type} deleteBtn={true} />)}\r\n                        </div>\r\n\r\n                        {/* a reference is a way to reference another element in the dom */}\r\n                        {/* ref takes a function that binds a property of our class to a reference of this input */}        \r\n                        {/* input box used to access the file picker */}\r\n                        <input \r\n                            style={{display:'none'}} \r\n                            type=\"file\"\r\n                            // when file is selected it sets the state to the file, hides the radio and sets type of file in state\r\n                            onChange={this.fileSelectedHandler} \r\n                            //input box is invisible activated by radio button choice through reference in upload type function \r\n                            ref={fileInput => this.fileInput=fileInput}>\r\n                        </input>\r\n\r\n                        {this.state.showRadio && \r\n                            <div>\r\n                                {/* clicking an input box sets which resource type options to show */}\r\n                                <input type=\"radio\" id=\"url\" name=\"addResource\" value=\"url\" onClick={this.uploadType}/>\r\n                                <label htmlFor=\"url\">Add URL</label>\r\n                                <input type=\"radio\" id=\"file\" name=\"addResource\" value=\"file\" onClick={this.uploadType}/>\r\n                                <label htmlFor=\"file\">Upload File</label>\r\n                            </div>\r\n                        }\r\n                        \r\n                        {this.state.uploadType===\"file\" && \r\n                            <form className=\"resource__upload\" onSubmit={(event)=>this.fileUpload(event, this.state.uploadType)}>\r\n                                <input className=\"resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                                <input className=\"resource__upload-file\" name=\"uploadURL\" type=\"text\" value={this.state.selectedFile.name} readOnly></input>\r\n                                <select className=\"resource__upload-type\">\r\n                                    <option value=\"pdf\">pdf</option>\r\n                                    <option value=\"doc\">doc</option>\r\n                                    <option value=\"video\">video</option>\r\n                                    <option value=\"image\">image</option>\r\n                                </select>\r\n                                <button type=\"submit\" className=\"resource__add\">Upload</button>\r\n                            </form>\r\n                        }\r\n\r\n                        {this.state.uploadType===\"url\" && \r\n                            <form className=\"resource__upload\" onSubmit={(event)=>this.fileUpload(event, this.state.uploadType)}>\r\n                                <input className=\"resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                                <input className=\"resource__upload-file\" name=\"uploadURL\" type=\"text\" placeholder=\"Enter URL\"></input>\r\n                                <button type=\"submit\" className=\"resource__add\">Upload</button>\r\n                            </form>\r\n                        }\r\n\r\n                        {!this.state.addActivated && <button className=\"add resource__add\" onClick={()=>this.setState({addActivated:true, showRadio:true})}>+</button>}\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Programs\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\User\\User.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx",["127"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport \"./SideBar.scss\"\r\n\r\n\r\nclass SideBar extends React.Component {\r\n\r\n    //props\r\n    // clients={this.state.clients} \r\n    // programs={this.state.programs} \r\n    // match={match}\r\n    //trainerId\r\n    //username = trainer username\r\n\r\n    state = {profile:\"\"};\r\n\r\n    componentDidMount(){\r\n        const profile = this.props.match.path.split(\"/\")[1];\r\n        this.setState({profile:profile});\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        \r\n        const activeLink = this.props.match.path.split(\"/\")[1];\r\n        if(document.getElementById(`${activeLink}-link`)){\r\n            const previouslyActiveLink = document.querySelector(\".sidebar__menu-link--active\");\r\n            previouslyActiveLink.classList.remove(\"sidebar__menu-link--active\");\r\n            \r\n            const activeLinkElement = document.getElementById(`${activeLink}-link`);\r\n            activeLinkElement.classList.add(\"sidebar__menu-link--active\");\r\n\r\n            const previouslyActiveIcon = document.querySelector(\".sidebar__menu-icon--active\");\r\n            previouslyActiveIcon.classList.remove(\"sidebar__menu-icon--active\");\r\n\r\n            const activeIconElement = document.getElementById(`${activeLink}-icon`);\r\n            activeIconElement.classList.add(\"sidebar__menu-icon--active\");\r\n        }\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        const {username,trainerId, trainerName, programs, clients, match} = this.props;\r\n\r\n        const defaultClientId = clients ? clients[0].userId : match.params.clientId\r\n\r\n        return (\r\n                \r\n                <div className=\"sidebar\" style={{backgroundImage: \"url('/images/main-background.jfif')\"}}>\r\n\r\n                <Link  to=\"/\">\r\n                        <div className=\"sidebar__logo\">\r\n                            <h1 className=\"sidebar__logo-title\" >P</h1>\r\n                            <span className=\"sidebar__logo-bigLetter\">2</span> \r\n                            <h1 className=\"sidebar__logo-title\"> T</h1>\r\n                        </div>\r\n                    </Link>\r\n                    <div className = \"sidebar__divider\"></div>\r\n                    <div className=\"sidebar__user\">pperlock</div>\r\n                    <ul className=\"sidebar__menu\">\r\n                        <Link to={`/trainer/${trainerName}/${trainerId}`}>\r\n                            <li id=\"trainer-link\" className=\"sidebar__menu-link sidebar__menu-link--active\">\r\n                                <img id=\"trainer-icon\" className=\"sidebar__menu-icon sidebar__menu-icon--active\" src=\"/icons/user-profile-icon.svg\" alt=\"user profile\"/>\r\n                                User Profile\r\n                            </li>\r\n                        </Link>\r\n                        {programs &&\r\n                            <Link to={`/programs/${programs[0].id}`}>\r\n                                <li id=\"programs-link\" className=\"sidebar__menu-link\"><img id=\"programs-icon\" className=\"sidebar__menu-icon\"src=\"/icons/programs-icon.svg\" alt=\"list icon\"/>Programs</li>\r\n                            </Link>\r\n                        }\r\n                        {clients &&\r\n                            <Link to={`/clients/${defaultClientId}/profile`}>\r\n                                <li id=\"clients-link\" className=\"sidebar__menu-link\"><img  id=\"clients-icon\" className=\"sidebar__menu-icon\" src=\"/icons/clients-icon.svg\" alt=\"clients icon\"/>Clients</li>\r\n                            </Link>\r\n                        }\r\n                        <Link to=\"/schedule\">\r\n                            <li id=\"schedule-link\" className=\"sidebar__menu-link\"><img id=\"schedule-icon\" className=\"sidebar__menu-icon\" src=\"/icons/calendar-icon.svg\" alt=\"calendar icon\"/>Schedule</li>\r\n                        </Link>\r\n                    </ul>\r\n                \r\n                </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default SideBar\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramContent\\ProgramContent.jsx",[],["128","129"],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientProfile\\ClientProfile.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientLessons\\ClientLessons.jsx",["130","131","132"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport './ClientLessons.scss'\r\n\r\nimport List from '../../components/List/List';\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\n\r\n//currentClient\r\n//programs\r\n\r\nclass ClientLessons extends React.Component {\r\n\r\n    state={\r\n        currentClient:this.props.currentClient,\r\n        currentLesson: this.props.currentClient.lessons.find(lesson=>lesson.status === \"current\"),\r\n        availablePrograms:this.props.programs,\r\n        displayResources:this.props.programs[0].resources, \r\n        showAddNote:false, showAddHomework:false, animateBar:true\r\n    }\r\n\r\n    componentDidMount(){\r\n\r\n        //gets an array of all the resource ids that have been applied to all lessons\r\n        let allApplied = [];\r\n        const lessons = this.state.currentClient.lessons;\r\n        lessons.map(lesson=> lesson.resources.map(resource => allApplied.push(resource)));\r\n        \r\n        //adds a key for applied to each resource for all trainer programs\r\n        const programs = this.props.programs;\r\n        programs.map(program => program.resources.map(resource => Object.assign(resource,{applied:false})))\r\n\r\n       \r\n        const copyClient = {...this.props.currentClient};\r\n\r\n        //adds the resource information for each lesson resource and adds a value of true for applied to the programs- stored only as ids in the client document in db\r\n        this.props.programs.forEach(program=>\r\n            program.resources.forEach(programResource=>\r\n                copyClient.lessons.forEach(lesson => \r\n                    lesson.resources.forEach((resource, i)=> {\r\n                        if(resource === programResource.id){\r\n                            //sets a value of true for applied resources\r\n                            programResource.applied=true;\r\n                            //remove the single id\r\n                            lesson.resources.splice(i,1);\r\n                            //replace the resource with the object\r\n                            lesson.resources.push(programResource);\r\n                        }  \r\n                    })\r\n                )          \r\n            )\r\n        )\r\n        \r\n        this.setState({currentClient:copyClient, availablePrograms:programs});\r\n        \r\n        console.log(copyClient);\r\n        console.log(programs);\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"componentUpdated\")\r\n    }\r\n\r\n    updateResources=(program)=>{\r\n       this.setState({displayResources:program.resources});\r\n    \r\n    }\r\n\r\n    showForm=(form)=>{\r\n        form === \"note\" ? this.setState({showAddNote:true}) : this.setState({showAddHomework:true});\r\n    }\r\n\r\n    addListItem=(event)=>{\r\n        event.preventDefault();\r\n        // event.stopPropagation();\r\n        !!event.target.newNote ? this.setState({showAddNote:false}) : this.setState({showAddHomework:false});\r\n    \r\n        if (!!event.target.newNote){\r\n            const newItem={message:event.target.newNote.value}\r\n            axios.post(`http://localhost:8080/client/${this.props.currentClient.userId}/${this.state.currentLesson.id}/addNote`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = this.state.currentLesson;\r\n                lessonCopy.notes = res.data;\r\n                this.setState({currentLesson:lessonCopy});\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }else{\r\n            const newItem={message:event.target.newHomework.value}\r\n            axios.post(`http://localhost:8080/client/${this.props.currentClient.userId}/${this.state.currentLesson.id}/addHomework`, newItem)\r\n            .then(res =>{\r\n                const lessonCopy = this.state.currentLesson;\r\n                lessonCopy.homework = res.data;\r\n                this.setState({currentLesson:lessonCopy});\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteListItem=(event, list)=>{\r\n        const lessonCopy = this.state.currentLesson;\r\n        if (list===\"notes\"){\r\n            axios.delete(`http://localhost:8080/client/${this.props.currentClient.userId}/${this.state.currentLesson.id}/${event.target.id}/deleteNote`)\r\n            .then(res =>{\r\n                lessonCopy.notes = res.data;\r\n                this.setState({currentLesson:lessonCopy});\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }else{\r\n            axios.delete(`http://localhost:8080/client/${this.props.currentClient.userId}/${this.state.currentLesson.id}/${event.target.id}/deleteHomework`)\r\n            .then(res =>{\r\n                lessonCopy.homework = res.data;\r\n                this.setState({currentLesson:lessonCopy});\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        }\r\n    }\r\n   \r\n\r\n    updateCurrentLesson = (lessonId) =>{\r\n        console.log(lessonId);\r\n        const currentLesson = this.props.currentClient.lessons.find(lesson => lesson.id === lessonId);\r\n        this.setState({currentLesson:currentLesson});\r\n    }\r\n\r\n    addNewLesson = () =>{\r\n        axios.post(`http://localhost:8080/client/${this.props.currentClient.userId}/addLesson`)\r\n            .then(res =>{\r\n                const clientCopy = this.state.currentClient;\r\n                console.log(clientCopy);\r\n                clientCopy.lessons.push(res.data)\r\n                this.setState({currentClient:clientCopy, currentLesson: res.data});\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    updateResources=()=>{\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        //copy of state saved to variables to save time when converted to classful component\r\n        const programs = [...this.state.availablePrograms];\r\n        const lessons = [...this.state.currentClient.lessons];\r\n        const currentClient = {...this.state.currentClient};\r\n        const currentLesson = {...this.state.currentLesson};\r\n\r\n        return (\r\n            <div className=\"lessons\">\r\n                <div className=\"lessons__list\">\r\n                    {lessons.map(lesson =>  \r\n                        <div id={lesson.id} key={lesson.id} className=\"lesson\" onClick={(event)=>this.updateCurrentLesson(lesson.id)}>\r\n                            <p className=\"lesson__name\">{lesson.name}</p>\r\n                            <p className=\"lesson__date\">{lesson.date}</p>\r\n                        </div>\r\n                    )}\r\n                    <p className=\"lessons__list-new\" onClick={this.addNewLesson}> + New </p>\r\n                </div>\r\n                <div className=\"component current-lesson\">\r\n                <h2 className=\"component-title\">{currentLesson.status !== \"current\" ? currentLesson.name : `${currentLesson.name} - Next Lesson`}</h2>\r\n                    <div className = \"current-lesson__top\">\r\n                        <div className=\"current-lesson__top-left\">\r\n                            <div className=\"current-lesson__top-details\">\r\n                                <p>{`Location: ${currentLesson.location}`}</p>\r\n                                <p>{`Date: ${currentLesson.date}`}</p>\r\n                                <p>{`Time: ${currentLesson.time}`}</p>\r\n                                <ModalContainer \r\n                                    modalType = \"update\" \r\n                                    modalName = \"modifyLesson\" \r\n                                    buttonText=\"Update\" \r\n                                    // onSubmitTrainer={updateClient} \r\n                                    information={currentLesson}\r\n                                />\r\n                            </div>\r\n                            <div>Google Map</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"lesson-divider\"></div>\r\n\r\n                    <h2 className=\"section-title section-title-resources\">Resources</h2>\r\n                    <div className=\"current-lesson__resources\">\r\n                        <div className=\"current-lesson__available\">\r\n                            {/* <p>Available Resources</p> */}\r\n                            <div className=\"current-lesson__available-content\">\r\n                                <ul className=\"current-lesson__available-programs\"> \r\n                                    {programs.map(program=> <Link key={program.id} to={`/clients/${currentClient.userId}/lessons`}><li onClick={()=>this.updateResources(program)} className=\"current-lesson__available-programs-item\">{program.name}</li></Link>)}\r\n                                </ul>\r\n\r\n                                <div className=\"list current-lesson__available-resources\">\r\n                                    {this.state.displayResources.map(resource=> <List key={resource.id} content={resource.name} id={resource.id} deleteBtn={false}/>)}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className= \"current-lesson__resources-applied\">\r\n                            <p>Lesson Resources</p>\r\n                            {/* {lessons.map(lesson=> \r\n                                lesson.resources.map(resource=><List key={resource.id} content={resource.name} id={resource.id} deleteBtn={true}/>)\r\n                            )} */}\r\n                            {currentLesson.resources.length===0 && \r\n                                <div className=\"empty-container\">\r\n                                    <img className=\"empty-container__icon\" src=\"/icons/add-icon.svg\"></img>\r\n                                    <p>Drag and Drop to Add Resources</p>\r\n                                </div>}\r\n                            {currentLesson.resources.map(resource=><List key={resource.id} content={resource.name} id={resource.id} deleteBtn={true}/>)}\r\n                            \r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"current-lesson__bottom\">\r\n                        <div className=\"current-lesson__bottom-notes\">\r\n                                <h2 className=\"section-title\" >Notes</h2>\r\n                                {currentLesson.notes.length===0 && \r\n                                <div onClick={()=> {this.showForm(\"note\")}} className=\"empty-container\">\r\n                                    <img className=\"empty-container__icon\" src=\"/icons/add-icon.svg\"></img>\r\n                                    <p>Click to Add Homework</p>\r\n                                </div>}\r\n                                {currentLesson.notes.map(note=><List key={note.id} content={note.message} id={note.id} deleteBtn={true} deleteFunction={this.deleteListItem} list=\"notes\"/>)}\r\n                                <form className=\"client__notes-form\" onSubmit={(event)=>this.addListItem(event)}>\r\n                                    {this.state.showAddNote && \r\n                                        <div className=\"current-lesson__form-input\">\r\n                                            <input className=\"client__notes-new\" type=\"text\" name=\"newNote\" placeholder=\"New Note\"></input>\r\n                                            {/* <button type=\"submit\" className=\"current-lesson__submitBtn\"> Add </button> */}\r\n                                        </div>\r\n                                    }    \r\n                                    {!this.state.showAddNote && <p className=\"current-lesson__addBtn\" onClick={()=> {this.showForm(\"note\")}}>+</p>}\r\n                                </form>\r\n                        </div>\r\n                        <div className=\"lesson-divider\"></div>\r\n\r\n                        <div className=\"current-lesson__bottom-homework\">\r\n                            <h2 className=\"section-title\">Homework</h2>\r\n                                \r\n                            {currentLesson.homework.length===0 && \r\n                                <div onClick={()=> {this.showForm(\"homework\")}} className=\"empty-container\">\r\n                                    <img className=\"empty-container__icon\" src=\"/icons/add-icon.svg\"></img>\r\n                                    <p>Click to Add Homework</p>\r\n                                </div>}\r\n\r\n                            {currentLesson.homework.map(item=><List key={item.id} content={item.message} id={item.id} deleteBtn={true} deleteFunction={this.deleteListItem} list=\"homework\"/>)}\r\n\r\n                            <form className=\"client__notes-form\" onSubmit={(event)=>this.addListItem(event)}>\r\n                                    {this.state.showAddHomework && \r\n                                        <div className=\"current-lesson__form-input\">\r\n                                            <input className=\"client__notes-new\" type=\"text\" name=\"newHomework\" placeholder=\"New Homework\"></input>\r\n                                            {/* <button className=\"current-lesson__submitBtn\"> Add </button> */}\r\n                                        </div>\r\n                                    }\r\n                                    {!this.state.showAddHomework && <p className=\"current-lesson__addBtn\" onClick={()=> {this.showForm(\"homework\")}}>+</p>}\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ClientLessons\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\List\\List.jsx",["133"],"import React from 'react';\r\n\r\nimport './List.scss';\r\n\r\nfunction List({id, content, link, description, deleteBtn, deleteFunction, list}) {\r\n    return (\r\n        <div className=\"list__item\">\r\n            <a href={link} className=\"list__item-name\" target=\"_blank\">{content}</a>\r\n            <div className=\"list__right\">\r\n                {description && <p className=\"list__right-type\">{description}</p>}\r\n                {deleteBtn && <button id={id} onClick={(event)=>deleteFunction(event, list)} className=\"list__right-delete\"> x </button>}\r\n                {/* {deleteBtn && <button onClick={()=>log(\"Patti\")} className=\"list__right-delete\"> x </button>} */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramBar\\ProgramBar.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Modal\\Modal.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\firebase.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx",["134"],"import React from 'react'\r\nimport './LessonDetailsForm.scss';\r\n\r\nfunction LessonDetailsForm({onSubmit, closeModal, lesson}) {\r\n    const {status, name, location, date, time, address, city, province, country, postal} = lesson;\r\n    return (\r\n        <form id=\"modal-form\" className=\"modal-form\" onSubmit={onSubmit} >\r\n            <div>\r\n                <input className=\"modal-form__input\" id=\"lessonName\" name=\"lessonName\" type=\"text\" placeholder=\"Lesson Name\" defaultValue={name}></input>\r\n                <select name=\"status\" id=\"status\">\r\n                    <option value=\"next\"> Next </option>\r\n                    <option value=\"past\"> Past </option>\r\n                </select>\r\n\r\n            </div>\r\n            <div>\r\n                <input className=\"modal-form__input\" id=\"date\" name=\"date\" type=\"date\"  defaultValue={date}></input>\r\n                <input className=\"modal-form__input\" id=\"time\" name=\"time\" type=\"time\"  defaultValue={time}></input>\r\n                \r\n            </div>\r\n            <div>\r\n                <input className=\"modal-form__input\" id=\"location\" name=\"location\" type=\"text\"  defaultValue={location}></input>\r\n                <input className=\"modal-form__input\" id=\"address\" name=\"address\" type=\"text\" placeholder=\"Address\" defaultValue={address} ></input>\r\n                <input className=\"modal-form__input\" id=\"city\" name=\"city\" type=\"text\" placeholder=\"City\" defaultValue={city}></input>\r\n                <input className=\"modal-form__input\" id=\"province\" name=\"province\" type=\"text\" placeholder=\"Province\" defaultValue={province}></input>\r\n                <input className=\"modal-form__input\" id=\"country\" name=\"country\" type=\"text\" placeholder=\"Country\" defaultValue={country}></input>\r\n                <input className=\"modal-form__input\" id=\"postal\" name=\"postal\" type=\"text\" placeholder=\"Postal Code\" defaultValue={postal} ></input>\r\n            </div>\r\n            <div className=\"modal-form__submit\">\r\n                <button className=\"modal-form__submit-cancel\" type=\"button\" onClick={closeModal}>Cancel</button>\r\n                <button className=\"modal-form__submit-button\" id=\"submit\" type=\"submit\" form=\"modal-form\">Submit</button>\r\n            </div>\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default LessonDetailsForm","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx",["135","136"],"import React, {useState, useEffect}  from 'react';\r\nimport {useDrop} from 'react-dnd';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// import './ClientLessons.scss'\r\n\r\nimport DNDList from '../../components/DNDList/DNDList';\r\nimport AppliedResources from '../../components/AppliedResources/AppliedResources';\r\n\r\n/**\r\n * \r\n * @param {Object} programs - all the trainer's programs\r\n * @param {Object} currentLesson - lesson currently rendered\r\n * @param {Object} currentClient - client currently rendered\r\n */\r\n\r\nfunction LessonResources({programs, currentLesson, currentClient}) {\r\n\r\n    const ItemTypes = {\r\n        CARD:'card',\r\n    };\r\n\r\n    //resources that are currently being displayed - change based on program chosen\r\n    const[displayResources, setResourceList] = useState(programs[0].resources);\r\n\r\n    //current lesson being rendered - changed based on drag and drop from available resources \r\n    const[currentLessonResources, updateCurrentLesson] = useState(currentLesson);\r\n    \r\n    \r\n    //update the resources of the current lesson when state changes\r\n    useEffect(() => {\r\n        updateCurrentLesson(currentLesson);\r\n    });\r\n\r\n    // update the resources being displayed when a program is chosen\r\n    const updateDisplayed = (program)=>{\r\n        setResourceList(program.resources);\r\n    }\r\n\r\n    //used to remove a resource from the available resources and add it to the lesson resources\r\n    const markAsDone = id => {\r\n\r\n        //find the resource to update and set the applied status to true        \r\n        const displays = [...displayResources];\r\n        displays.find(resource=> resource.id === id).applied=true;\r\n             \r\n        const lessonObject = {...currentLessonResources};\r\n        // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n        lessonObject.resources.push(displays.find(resource=> resource.id === id));\r\n\r\n        //update the displaye resources and the lesson resources that are rendered\r\n        setResourceList(displays);\r\n        updateCurrentLesson(lessonObject);\r\n\r\n        //create an array of the ids associated with the updated resources to push to the db\r\n        const updatedResources = lessonObject.resources.map(resource => resource.id)\r\n        console.log(updatedResources);\r\n\r\n        //update the db with the new lesson resources\r\n        axios.put(`http://localhost:8080/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n        .then(res =>{\r\n            console.log(res);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n    const removeResource=(id)=>{\r\n        console.log(id);\r\n         //find the resource to update and set the applied status to true        \r\n        const displays = [...displayResources];\r\n        displays.find(resource=> resource.id === id).applied=false;\r\n             \r\n        const lessonObject = {...currentLessonResources};\r\n        // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n        const index = lessonObject.resources.findIndex(resource => resource.id === id);\r\n        lessonObject.resources.splice(index,1);\r\n\r\n        //update the display resources and the lesson resources that are rendered\r\n        setResourceList(displays);\r\n        updateCurrentLesson(lessonObject);\r\n\r\n        //create an array of the ids associated with the updated resources to push to the db\r\n        const updatedResources = lessonObject.resources.map(resource => resource.id)\r\n        console.log(updatedResources);\r\n\r\n        // update the db with the new lesson resources\r\n        axios.put(`http://localhost:8080/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n        .then(res =>{\r\n            console.log(res);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    //setup for drop componenet from  lessons - available\r\n    const[{isOver}, drop] = useDrop({\r\n        accept: ItemTypes.CARD, //required - tells drop zone it will only accept card components\r\n        drop: (item, monitor)=> removeResource(item.id),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <div className=\"current-lesson__resources\">  \r\n            <div className=\"current-lesson__available\">\r\n                {/* <p>Available Resources</p> */}\r\n                <div className=\"current-lesson__available-content\">\r\n                    <ul className=\"current-lesson__available-programs\"> \r\n                        {programs.map(program=> <Link key={program.id} to={`/clients/${currentClient.userId}/lessons`}><li onClick={()=>updateDisplayed(program)} className=\"current-lesson__available-programs-item\">{program.name}</li></Link>)}\r\n                    </ul>\r\n                        <div ref={drop} className=\"list current-lesson__available-resources\">\r\n                            {displayResources.filter(resource => resource.applied === false)\r\n                                .map(resource=> <DNDList key={resource.id} content={resource.name} link={resource.link} id={resource.id}/>)}\r\n                        </div>                \r\n                </div>\r\n            </div>\r\n            {/* applied resources component set up as a drop component */}\r\n            <AppliedResources currentLesson={currentLessonResources} markAsDone={markAsDone}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LessonResources\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx",["137","138","139","140"],"import React, {useContext} from 'react'\r\nimport {useDrop} from 'react-dnd';\r\nimport axios from 'axios';\r\n\r\nimport List from '../../components/List/List';\r\nimport DNDList from '../../components/DNDList/DNDList';\r\n\r\nconst ItemTypes = {\r\n    CARD:'card',\r\n};\r\n\r\n/**\r\n * \r\n * @param {object} currentLesson - lesson rendered on screen\r\n * @param {function} markAsDone - function to update state on Lesson Resources when item is dragged here\r\n */\r\n\r\nfunction AppliedResources({currentLesson, markAsDone}) {\r\n    \r\n    const[{isOver}, drop] = useDrop({\r\n        \r\n        accept: ItemTypes.CARD, //required - tells drop zone it will only accept card components\r\n        drop: (item, monitor)=> markAsDone(item.id),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <div ref={drop} bg={isOver ? \"green.500\" : \"green.200\"} className= \"current-lesson__resources-applied\">\r\n            <p>Lesson Resources</p>\r\n            {currentLesson.resources.length===0 && \r\n                <div className=\"empty-container\">\r\n                    <img className=\"empty-container__icon\" src=\"/icons/add-icon.svg\"></img>\r\n                    <p>Drag and Drop to Add Resources</p>\r\n                </div>}\r\n            {currentLesson.resources.map(resource=><DNDList key={resource.id} content={resource.name} id={resource.id}/>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppliedResources\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx",["141"],"import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport './DNDList.scss';\r\n\r\nconst ItemTypes = {\r\n    CARD:'card',\r\n};\r\n\r\n/**\r\n * \r\n * @param {string} id - resource id \r\n * @param {string} content - text to render\r\n * @param {string} link - url for text to link to\r\n * @param {string} description- type of resource if it is a resource list\r\n * \r\n */\r\nfunction DNDList({id, content, link, description}) {\r\n\r\n    // argument1 = props from the monitor\r\n    const[{isDragging}, drag] = useDrag({\r\n        item:{\r\n            type:ItemTypes.CARD,\r\n            //type is required - can pass anything else you want with it - here i want the id\r\n            id: id,\r\n        },\r\n        //talks to the monitor and sets the isDragging prop to true when is dragging\r\n        collect:monitor=>({\r\n            isDragging:!!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    return (\r\n        <div ref={drag} className=\"list__item\" opacity={isDragging ? '1' : '1'}>\r\n            <a href={link} className=\"list__item-name\" target=\"_blank\">{content}</a>\r\n            <div className=\"list__right\" >\r\n                {description && <p className=\"list__right-type\">{description}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DNDList\r\n",{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":52,"column":25,"nodeType":"148","messageId":"149","endLine":52,"endColumn":36},{"ruleId":"146","severity":1,"message":"150","line":44,"column":16,"nodeType":"148","messageId":"149","endLine":44,"endColumn":24},{"ruleId":"142","replacedBy":"151"},{"ruleId":"144","replacedBy":"152"},{"ruleId":"146","severity":1,"message":"153","line":2,"column":9,"nodeType":"148","messageId":"149","endLine":2,"endColumn":13},{"ruleId":"154","severity":1,"message":"155","line":217,"column":37,"nodeType":"156","endLine":217,"endColumn":102},{"ruleId":"154","severity":1,"message":"155","line":240,"column":37,"nodeType":"156","endLine":240,"endColumn":102},{"ruleId":"157","severity":1,"message":"158","line":10,"column":13,"nodeType":"156","endLine":10,"endColumn":72},{"ruleId":"146","severity":1,"message":"159","line":5,"column":12,"nodeType":"148","messageId":"149","endLine":5,"endColumn":18},{"ruleId":"160","severity":1,"message":"161","line":32,"column":5,"nodeType":"148","endLine":32,"endColumn":14,"suggestions":"162"},{"ruleId":"146","severity":1,"message":"163","line":101,"column":12,"nodeType":"148","messageId":"149","endLine":101,"endColumn":18},{"ruleId":"146","severity":1,"message":"164","line":1,"column":16,"nodeType":"148","messageId":"149","endLine":1,"endColumn":26},{"ruleId":"146","severity":1,"message":"165","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":13},{"ruleId":"146","severity":1,"message":"166","line":5,"column":8,"nodeType":"148","messageId":"149","endLine":5,"endColumn":12},{"ruleId":"154","severity":1,"message":"155","line":34,"column":21,"nodeType":"156","endLine":34,"endColumn":86},{"ruleId":"157","severity":1,"message":"158","line":35,"column":13,"nodeType":"156","endLine":35,"endColumn":72},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'downloadURL' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.",["167"],["168"],"'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","'status' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'updateCurrentLesson'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [currentLesson] as a second argument to the useEffect Hook.",["169"],"'isOver' is assigned a value but never used.","'useContext' is defined but never used.","'axios' is defined but never used.","'List' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},"Add dependencies array: [currentLesson]",{"range":"172","text":"173"},[1166,1166],", [currentLesson]"]