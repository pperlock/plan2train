[{"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\index.js":"1","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\reportWebVitals.js":"2","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\App.js":"3","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx":"4","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx":"5","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx":"6","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx":"7","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\User\\User.jsx":"8","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx":"9","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx":"10","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramContent\\ProgramContent.jsx":"11","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientProfile\\ClientProfile.jsx":"12","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientLessons\\ClientLessons.jsx":"13","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx":"14","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\List\\List.jsx":"15","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx":"16","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramBar\\ProgramBar.jsx":"17","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx":"18","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Modal\\Modal.jsx":"19","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx":"20","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx":"21","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx":"22","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\firebase.js":"23","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx":"24","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx":"25","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx":"26","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx":"27","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx":"28","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Map\\Map.jsx":"29","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\mapStyles.js":"30","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Client\\Client.jsx":"31","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Login\\Login.jsx":"32","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx":"33","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx":"34","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\GridList\\GridList.jsx":"35","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx":"36"},{"size":479,"mtime":1609516748053,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":499162500000,"results":"39","hashOfConfig":"38"},{"size":1645,"mtime":1611790587744,"results":"40","hashOfConfig":"38"},{"size":12860,"mtime":1611861756596,"results":"41","hashOfConfig":"38"},{"size":971,"mtime":1611835645698,"results":"42","hashOfConfig":"38"},{"size":10346,"mtime":1611835903866,"results":"43","hashOfConfig":"38"},{"size":5780,"mtime":1611861464009,"results":"44","hashOfConfig":"38"},{"size":4100,"mtime":1611862495952,"results":"45","hashOfConfig":"38"},{"size":168,"mtime":1611712457260,"results":"46","hashOfConfig":"38"},{"size":4169,"mtime":1611791329525,"results":"47","hashOfConfig":"38"},{"size":872,"mtime":1611172017746,"results":"48","hashOfConfig":"38"},{"size":6406,"mtime":1611863363310,"results":"49","hashOfConfig":"38"},{"size":19723,"mtime":1611871915867,"results":"50","hashOfConfig":"38"},{"size":1620,"mtime":1611792082908,"results":"51","hashOfConfig":"38"},{"size":1371,"mtime":1611837549657,"results":"52","hashOfConfig":"38"},{"size":4298,"mtime":1611863192597,"results":"53","hashOfConfig":"38"},{"size":961,"mtime":1609618837760,"results":"54","hashOfConfig":"38"},{"size":672,"mtime":1611863724759,"results":"55","hashOfConfig":"38"},{"size":2540,"mtime":1611767865247,"results":"56","hashOfConfig":"38"},{"size":4507,"mtime":1611767084038,"results":"57","hashOfConfig":"38"},{"size":2549,"mtime":1611792642979,"results":"58","hashOfConfig":"38"},{"size":1106,"mtime":1611791774964,"results":"59","hashOfConfig":"38"},{"size":464,"mtime":1611194250386,"results":"60","hashOfConfig":"38"},{"size":2267,"mtime":1611793126316,"results":"61","hashOfConfig":"38"},{"size":2080,"mtime":1611794626835,"results":"62","hashOfConfig":"38"},{"size":5711,"mtime":1611835798729,"results":"63","hashOfConfig":"38"},{"size":1362,"mtime":1611577284211,"results":"64","hashOfConfig":"38"},{"size":1258,"mtime":1611520289890,"results":"65","hashOfConfig":"38"},{"size":1650,"mtime":1611835669081,"results":"66","hashOfConfig":"38"},{"size":3522,"mtime":1611712457269,"results":"67","hashOfConfig":"38"},{"size":159,"mtime":1611713068697,"results":"68","hashOfConfig":"38"},{"size":292,"mtime":1611713326933,"results":"69","hashOfConfig":"38"},{"size":4547,"mtime":1611835725610,"results":"70","hashOfConfig":"38"},{"size":916,"mtime":1611755742778,"results":"71","hashOfConfig":"38"},{"size":2279,"mtime":1611869907607,"results":"72","hashOfConfig":"38"},{"size":2306,"mtime":1611843434313,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"l44x0r",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"76"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"76"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"76"},"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\index.js",[],["154","155"],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\reportWebVitals.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\App.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Trainer\\Trainer.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Intro\\Intro.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Programs\\Programs.jsx",["156"],"import React from 'react';\r\nimport \"./Programs.scss\";\r\nimport firebase from '../../firebase';\r\n\r\nimport ClientList from '../../components/ClientList/ClientList';\r\nimport GridList from '../../components/GridList/GridList';\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\n\r\n/**\r\n *  programs={this.state.programs} \r\n    currentProgramId={match.params.programId} \r\n    match={match}\r\n    addProgram={this.addProgram}\r\n    addResource={this.addResource} \r\n */\r\n\r\n/**\r\n * Props Passed in by Trainer\r\n * @param {Object} currentClient \r\n * @param {string} currentProgramId \r\n * @param {Object} match \r\n * @param {function} addProgram\r\n * @param {function} deleteProgram\r\n * @param {function} addResource\r\n * @param {function} deleteResource\r\n */\r\n \r\nclass Programs extends React.Component {\r\n\r\n    state={selectedFile:null, showRadio:true, uploaded:false, uploadType:\"\"}\r\n\r\n    componentDidUpdate(){\r\n        console.log(\"programs - did update\")\r\n    }\r\n\r\n    // fired by clicking on a radio button\r\n    uploadType = (event) => {\r\n        const type = event.target.value;\r\n        if (type ===\"file\"){\r\n                console.log( this.fileInput)\r\n                this.fileInput.click()\r\n        }else{\r\n            this.setState({uploadType:type, showRadio:false})\r\n        }\r\n    }\r\n\r\n    // fired through reference in uploadType - event to handle choosing a file type from file picker\r\n    fileSelectedHandler = event =>{\r\n        //files is an array - if they choose more than one\r\n        this.setState({selectedFile:event.target.files[0], uploadType:\"file\", showRadio:false});\r\n    }\r\n\r\n    // fired by clicking the upload button\r\n    fileUpload=(event,uploadType)=>{\r\n        event.preventDefault();\r\n        const selectedIndex = event.target.uploadType.options.selectedIndex\r\n        const selectedType = event.target.uploadType.options[selectedIndex].value;\r\n        \r\n        // if the resource to be added is a file the save it to firebase and send the resulting url to db\r\n        if (uploadType === \"file\"){\r\n            let bucketName = this.props.programs[0].trainerId;\r\n            let file = this.state.selectedFile;\r\n            let storageRef = firebase.storage().ref(`/${bucketName}/${file.name}`);\r\n            let uploadTask = storageRef.put(file);\r\n            // uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,\r\n            //     ()=>{\r\n            //         let downloadURL = uploadTask.snapshot.getDownloadURL;\r\n            //     })\r\n            \r\n            let storageLoc = firebase.storage().ref();\r\n            storageLoc.child(`/${bucketName}/${file.name}`).getDownloadURL()\r\n            .then((url)=>{\r\n                const newResource={\r\n                    name:event.target.uploadName.value,\r\n                    url:url,\r\n                    type: selectedType\r\n                }\r\n                this.props.addResource(newResource, this.props.match.params.programId);\r\n            })\r\n            .catch(err=>{\r\n                console.log(err);\r\n            })\r\n        //if the resource is a url then capture the url and send it to db\r\n        }else{\r\n            const newResource={\r\n                name:event.target.uploadName.value,\r\n                url:event.target.uploadURL.value,\r\n                type:\"url\"\r\n            }\r\n            this.props.addResource(newResource, this.props.match.params.programId);\r\n        }\r\n\r\n        // return the add button to the screen and hide the resource input elements\r\n        this.setState({uploadType:\"\",  showRadio:true});\r\n    }\r\n\r\n\r\n    render(){\r\n        const {programs, match, addProgram}=this.props;\r\n        const program = programs.find(program=>program.id===match.params.programId)\r\n\r\n        console.log(programs);\r\n\r\n\r\n        \r\n        return (\r\n            <div className=\"programs__container\" style={{backgroundImage: \"url('/images/main2.jfif')\"}} >\r\n                <ClientList list={programs} match={match} onSubmit={addProgram}/>\r\n                <div className=\"programs__container-right\">\r\n                    {/* <div className=\"program\"> */}\r\n                        <div className=\"component program__resources\">\r\n                            <div className=\"program__header\">\r\n                                <p className=\"program__header-title\">{program.name}</p>\r\n                                <p className=\"program__header-description\">{program.description}</p>\r\n                            </div>\r\n\r\n                            <ModalContainer \r\n                                modalType = \"delete\" \r\n                                modalName = \"delete\" \r\n                                buttonText=\"Delete\" \r\n                                buttonType=\"x\"\r\n                                onSubmitTrainer={this.props.deleteProgram}\r\n                                deleteString= {program.name}\r\n                                deleteId={program.id}\r\n                            />\r\n\r\n                            {program.resources.length === 0 && \r\n                                <div onClick={()=>this.setState({showRadio:true})} className=\"empty-container\">\r\n                                    <img className=\"empty-container__icon\" src=\"/icons/add-icon.svg\" alt=\"add icon\"></img>\r\n                                    <p>Click to Add Resources</p>\r\n                                </div>}  \r\n\r\n                        </div>   \r\n                    {/* </div> */}\r\n                        <div className=\"gridlist\">\r\n                            {program.resources.map(resource=> \r\n                                <GridList \r\n                                    key={resource.id} \r\n                                    content={resource.name}\r\n                                    resourceType={resource.type} \r\n                                    id={resource.id} \r\n                                    link={resource.url} \r\n                                    description={resource.type} \r\n                                    deleteBtn={true}\r\n                                    deleteType=\"modal\" \r\n                                    deleteFunction={this.props.deleteResource}\r\n                                />)}\r\n                        </div>\r\n\r\n                    <div className=\"resource__add\">\r\n                        {/* a reference is a way to reference another element in the dom */}\r\n                        {/* ref takes a function that binds a property of our class to a reference of this input */}        \r\n                        {/* input box used to access the file picker */}\r\n                        <input \r\n                            style={{display:'none'}} \r\n                            type=\"file\"\r\n                            // when file is selected it sets the state to the file, hides the radio and sets type of file in state\r\n                            onChange={this.fileSelectedHandler} \r\n                            //input box is invisible activated by radio button choice through reference in upload type function \r\n                            ref={fileInput => this.fileInput=fileInput}>\r\n                        </input>\r\n\r\n                        {this.state.showRadio && \r\n                            <div className=\"resource__add-radios\">\r\n                                {/* clicking an input box sets which resource type options to show */}\r\n                                <input className=\"resource__add-radios-button\" type=\"radio\" id=\"url\" name=\"addResource\" value=\"url\" onClick={this.uploadType}/>\r\n                                <label className=\"resource__add-radios-label\" htmlFor=\"url\">Add URL</label>\r\n                                <input className=\"resource__add-radios-button\" type=\"radio\" id=\"file\" name=\"addResource\" value=\"file\" onClick={this.uploadType}/>\r\n                                <label className=\"resource__add-radios-label\" htmlFor=\"file\">Upload File</label>\r\n                            </div>\r\n                        }\r\n                        \r\n                        {(this.state.uploadType===\"file\" && !this.state.showRadio) &&\r\n                            <form className=\"resource__upload\" onSubmit={(event)=>this.fileUpload(event, this.state.uploadType)}>\r\n                                <input className=\"text-input resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                                <input className=\"text-input resource__upload-file\" name=\"uploadURL\" type=\"text\" value={this.state.selectedFile.name} readOnly></input>\r\n                                <select className=\"resource__upload-type\" name=\"uploadType\">\r\n                                    <option value=\"pdf\">pdf</option>\r\n                                    <option value=\"doc\">doc</option>\r\n                                    <option value=\"video\">video</option>\r\n                                    <option value=\"image\">image</option>\r\n                                </select>\r\n                                <button  className=\"resource__upload-back\" onClick={()=>{ this.setState({showRadio:true})}}><img src=\"/icons/arrow_back-24px.svg\" alt=\"back\"/></button> \r\n                                <button className=\"resource__upload-submit\" type=\"submit\">Add</button>  \r\n                            </form>\r\n                        }\r\n\r\n                        {(this.state.uploadType===\"url\" && !this.state.showRadio) &&\r\n                            <form className=\"resource__upload\" onSubmit={(event)=>this.fileUpload(event, this.state.uploadType)}>\r\n                                <input className=\"text-input resource__upload-name\" name=\"uploadName\" type=\"text\" placeholder=\"Resource Name\" required></input>\r\n                                <input className=\"text-input resource__upload-file\" name=\"uploadURL\" type=\"text\" placeholder=\"Enter URL\" required></input>\r\n                                <button  className=\"resource__upload-back\" onClick={()=>{ this.setState({showRadio:true})}}><img src=\"/icons/arrow_back-24px.svg\" alt=\"back\"/></button> \r\n                                <button className=\"resource__upload-submit\" type=\"submit\">Add</button>    \r\n                            </form>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Programs\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Clients\\Clients.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\User\\User.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Schedule\\Schedule.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\SideBar\\SideBar.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramContent\\ProgramContent.jsx",[],["157","158"],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientProfile\\ClientProfile.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientLessons\\ClientLessons.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ClientList\\ClientList.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\List\\List.jsx",["159"],"import React from 'react';\r\n\r\nimport './List.scss';\r\n\r\nimport ModalContainer from '../../components/ModalContainer/ModalContainer';\r\n\r\n\r\nfunction List({id, content, link, description, deleteBtn, deleteFunction, list, deleteType}) {\r\n    return (\r\n        <div className=\"list__item\">\r\n            <a href={link} className=\"list__item-name\" target=\"_blank\">{content}</a>\r\n            <div className=\"list__right\" >\r\n                {description && <p className=\"list__right-type\">{description}</p>}\r\n                \r\n                {/* conditionally renders a delete button depending on the deleteType variable - won't show for current lesson - don't want to allow deletion */}\r\n                {(deleteType !== \"modal\" && deleteBtn) && <button id={id} onClick={(event)=>deleteFunction(event, list)} className=\"list__right-delete\"> x </button>}\r\n                \r\n                {deleteType===\"modal\" &&\r\n                    <ModalContainer \r\n                        modalType = \"delete\" \r\n                        modalName = \"delete\" \r\n                        buttonText=\"x\" \r\n                        onSubmit={deleteFunction}\r\n                        deleteString= {content}\r\n                        deleteId={id}\r\n                        buttonType=\"x\"\r\n                    />\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ModalContainer\\ModalContainer.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\ProgramBar\\ProgramBar.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\TriggerModalButton\\TriggerModalButton.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Modal\\Modal.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\PersonalDetailsForm\\PersonalDetailsForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewClientForm\\NewClientForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NewProgramForm\\NewProgramForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\firebase.js",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DeleteModal\\DeleteModal.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonDetailsForm\\LessonDetailsForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LessonResources\\LessonResources.jsx",["160"],"import React, {useState, useEffect}  from 'react';\r\nimport {useDrop} from 'react-dnd';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\n// import './ClientLessons.scss'\r\n\r\nimport DNDList from '../../components/DNDList/DNDList';\r\nimport AppliedResources from '../../components/AppliedResources/AppliedResources';\r\n\r\n/**\r\n * \r\n * @param {Object} programs - all the trainer's programs\r\n * @param {Object} currentLesson - lesson currently rendered\r\n * @param {Object} currentClient - client currently rendered\r\n */\r\n\r\nfunction LessonResources({programs, currentLesson, currentClient, match}) {\r\n\r\n    const ItemTypes = {\r\n        CARD:'card',\r\n    };\r\n\r\n    //resources that are currently being displayed - change based on program chosen\r\n    const[displayResources, setResourceList] = useState(programs[0].resources);\r\n\r\n    //current lesson being rendered - changed based on drag and drop from available resources \r\n    const[currentLessonResources, updateCurrentLesson] = useState(currentLesson);\r\n    \r\n    \r\n    //update the resources of the current lesson when state changes\r\n    useEffect(() => {\r\n        updateCurrentLesson(currentLesson);\r\n    },[currentLesson]);\r\n\r\n    // update the resources being displayed when a program is chosen\r\n    const updateDisplayed = (program)=>{\r\n        setResourceList(program.resources);\r\n    }\r\n\r\n    //used to remove a resource from the available resources and add it to the lesson resources\r\n    const markAsDone = id => {\r\n\r\n        //find the resource to update and set the applied status to true        \r\n        const displays = [...displayResources];\r\n        displays.find(resource=> resource.id === id).applied=true;\r\n             \r\n        const lessonObject = {...currentLessonResources};\r\n        // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n        lessonObject.resources.push(displays.find(resource=> resource.id === id));\r\n\r\n        //update the displaye resources and the lesson resources that are rendered\r\n        setResourceList(displays);\r\n        updateCurrentLesson(lessonObject);\r\n\r\n        //create an array of the ids associated with the updated resources to push to the db\r\n        const updatedResources = lessonObject.resources.map(resource => resource.id)\r\n        console.log(updatedResources);\r\n\r\n        //update the db with the new lesson resources\r\n        axios.put(`http://localhost:8080/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n        .then(res =>{\r\n            console.log(res);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n\r\n    }\r\n\r\n    const removeResource=(id)=>{\r\n        console.log(id);\r\n         //find the resource to update and set the applied status to true        \r\n        const displays = [...displayResources];\r\n        displays.find(resource=> resource.id === id).applied=false;\r\n             \r\n        const lessonObject = {...currentLessonResources};\r\n        // take the id from the resource that was moved, find the data associated with it and push it to the resources of the current lesson\r\n        const index = lessonObject.resources.findIndex(resource => resource.id === id);\r\n        lessonObject.resources.splice(index,1);\r\n\r\n        //update the display resources and the lesson resources that are rendered\r\n        setResourceList(displays);\r\n        updateCurrentLesson(lessonObject);\r\n\r\n        //create an array of the ids associated with the updated resources to push to the db\r\n        const updatedResources = lessonObject.resources.map(resource => resource.id)\r\n        console.log(updatedResources);\r\n\r\n        // update the db with the new lesson resources\r\n        axios.put(`http://localhost:8080/client/${currentClient.userId}/${currentLessonResources.id}/updateResource`, updatedResources)\r\n        .then(res =>{\r\n            console.log(res);\r\n        })\r\n        .catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n    //setup for drop componenet from  lessons - available\r\n    const[{isOver}, drop] = useDrop({\r\n        accept: ItemTypes.CARD, //required - tells drop zone it will only accept card components\r\n        drop: (item, monitor)=> removeResource(item.id),\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    });\r\n\r\n    return (\r\n        <div className=\"current-lesson__resources\">  \r\n            <div className=\"current-lesson__available\">\r\n                {/* <p>Available Resources</p> */}\r\n                <div className=\"current-lesson__available-content\">\r\n                    <ul className=\"current-lesson__available-programs\"> \r\n                        {programs.map(program=> <Link key={program.id} to={`/trainer/${match.params.username}/${match.params.trainerId}/clients/${currentClient.userId}/lessons`}><li onClick={()=>updateDisplayed(program)} className=\"current-lesson__available-programs-item\">{program.name}</li></Link>)}\r\n                    </ul>\r\n                        <div ref={drop} className=\"list current-lesson__available-resources\">\r\n                            {displayResources.filter(resource => resource.applied === false)\r\n                                .map(resource=> <DNDList key={resource.id} content={resource.name} link={resource.link} id={resource.id}/>)}\r\n                        </div>                \r\n                </div>\r\n            </div>\r\n            {/* applied resources component set up as a drop component */}\r\n            <AppliedResources currentLesson={currentLessonResources} markAsDone={markAsDone}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LessonResources\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\AppliedResources\\AppliedResources.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\DNDList\\DNDList.jsx",["161"],"import React from 'react';\r\nimport { useDrag } from 'react-dnd';\r\n\r\nimport './DNDList.scss';\r\n\r\nconst ItemTypes = {\r\n    CARD:'card',\r\n};\r\n\r\n/**\r\n * \r\n * @param {string} id - resource id \r\n * @param {string} content - text to render\r\n * @param {string} link - url for text to link to\r\n * @param {string} description- type of resource if it is a resource list\r\n * \r\n */\r\nfunction DNDList({id, content, link, description}) {\r\n\r\n    // argument1 = props from the monitor\r\n    const[{isDragging}, drag] = useDrag({\r\n        item:{\r\n            type:ItemTypes.CARD,\r\n            //type is required - can pass anything else you want with it - here i want the id\r\n            id: id,\r\n        },\r\n        //talks to the monitor and sets the isDragging prop to true when is dragging\r\n        collect:monitor=>({\r\n            isDragging:!!monitor.isDragging(),\r\n        }),\r\n    })\r\n\r\n    return (\r\n        <div ref={drag} className=\"list__item\" opacity={isDragging ? '1' : '1'}>\r\n            <a href={link} className=\"list__item-name\" target=\"_blank\">{content}</a>\r\n            <div className=\"list__right\" >\r\n                {description && <p className=\"list__right-type\">{description}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DNDList\r\n","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\Map\\Map.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\mapStyles.js",["162"],"export default [\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"weight\": \"2.00\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"geometry.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#9c9c9c\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"all\",\r\n        \"elementType\": \"labels.text\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#f2f2f2\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"landscape.man_made\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"poi\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"saturation\": -100\r\n            },\r\n            {\r\n                \"lightness\": 45\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#eeeeee\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#7b7b7b\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.highway\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"simplified\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"road.arterial\",\r\n        \"elementType\": \"labels.icon\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"transit\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"visibility\": \"off\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"all\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#46bcec\"\r\n            },\r\n            {\r\n                \"visibility\": \"on\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"geometry.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#c8d7d4\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.fill\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#070707\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"featureType\": \"water\",\r\n        \"elementType\": \"labels.text.stroke\",\r\n        \"stylers\": [\r\n            {\r\n                \"color\": \"#ffffff\"\r\n            }\r\n        ]\r\n    }\r\n]","C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Client\\Client.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\Pages\\Login\\Login.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LoginModal\\LoginModal.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\LoginForm\\LoginForm.jsx",[],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\GridList\\GridList.jsx",["163"],"C:\\Users\\patti\\Desktop\\plan2train\\plan2train\\client\\src\\components\\NoteModal\\NoteModal.jsx",["164","165"],"import React, {useState, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport FocusTrap from 'focus-trap-react';\r\nimport axios from 'axios';\r\n\r\nimport \"./NoteModal.scss\";\r\n\r\nfunction NoteModal({onKeyDown, modalRef, buttonRef, closeModal, onSubmit, information}) {\r\n\r\n    const [note, setNote]=useState(information);\r\n\r\n    const handleChange = (event)=>{\r\n        setNote(event.target.value);\r\n    }\r\n\r\n    const handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        onSubmit(note);\r\n        closeModal();\r\n    }\r\n\r\n    return ReactDOM.createPortal(\r\n        <FocusTrap>\r\n            <aside \r\n            tag=\"aside\"\r\n            role='dialog'\r\n            tabIndex='-1'\r\n            aria-modal='true'\r\n            className='modal-cover'\r\n            onKeyDown={onKeyDown}>\r\n                <div className=\"modal-area modal-note__area\" ref={modalRef}>\r\n                    <div className=\"modal-note__header\">\r\n                        <form className=\"modal-note__header-form\" name=\"noteForm\" onSubmit={handleSubmit}>                            \r\n                            <textarea value={note} onChange={handleChange} className=\"modal-note__header-form-input\" form=\"noteForm\" wrap=\"hard\" name=\"newNote\" id=\"newNote\" placeholder=\"New Note\" rows=\"15\" cols=\"52\">{note}</textarea>\r\n                            <button type=\"submit\" className=\" modal-note__header-form-submit\"> Enter </button>\r\n                        </form>\r\n                    </div>\r\n                    <img className=\"modal-note__image\" src=\"/images/typewriter.png\" alt=\"typewriter\"/>\r\n                    <button\r\n                        ref={buttonRef}\r\n                        aria-label='Close Modal'\r\n                        aria-labelledby=\"close-modal\"\r\n                        className=\"_modal-close modal-note__close\"\r\n                        onClick={closeModal}>\r\n                        <span id=\"close-modal\" className=\"_hide-visual\">Close</span>\r\n                        <svg className=\"_modal-close-icon\" viewBox=\"0 0 40 40\">\r\n                            <path d=\"M 10,10 L 30,30 M 30,10 L 10,30\" />\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n\r\n            </aside>\r\n        </FocusTrap>, document.body\r\n    );\r\n};\r\n\r\nexport default NoteModal\r\n",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":64,"column":17,"nodeType":"172","messageId":"173","endLine":64,"endColumn":27},{"ruleId":"166","replacedBy":"174"},{"ruleId":"168","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":11,"column":13,"nodeType":"178","endLine":11,"endColumn":72},{"ruleId":"170","severity":1,"message":"179","line":101,"column":12,"nodeType":"172","messageId":"173","endLine":101,"endColumn":18},{"ruleId":"176","severity":1,"message":"177","line":35,"column":13,"nodeType":"178","endLine":35,"endColumn":72},{"ruleId":"180","severity":1,"message":"181","line":1,"column":1,"nodeType":"182","endLine":170,"endColumn":2},{"ruleId":"176","severity":1,"message":"177","line":26,"column":21,"nodeType":"178","endLine":26,"endColumn":84},{"ruleId":"170","severity":1,"message":"183","line":1,"column":26,"nodeType":"172","messageId":"173","endLine":1,"endColumn":35},{"ruleId":"170","severity":1,"message":"184","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":13},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'uploadTask' is assigned a value but never used.","Identifier","unusedVar",["185"],["186"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'isOver' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'useEffect' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]